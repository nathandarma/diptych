{"ast":null,"code":"import { Selection as $e40ea825a81a3709$export$52baac22726c72bf } from \"./Selection.mjs\";\nimport { compareNodeOrder as $jkhUT$compareNodeOrder, getFirstItem as $jkhUT$getFirstItem, getChildNodes as $jkhUT$getChildNodes } from \"@react-stately/collections\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {\n  /**\n  * The type of selection that is allowed in the collection.\n  */\n  get selectionMode() {\n    return this.state.selectionMode;\n  }\n  /**\n  * Whether the collection allows empty selection.\n  */\n  get disallowEmptySelection() {\n    return this.state.disallowEmptySelection;\n  }\n  /**\n  * The selection behavior for the collection.\n  */\n  get selectionBehavior() {\n    return this.state.selectionBehavior;\n  }\n  /**\n  * Sets the selection behavior for the collection.\n  */\n  setSelectionBehavior(selectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n  /**\n  * Whether the collection is currently focused.\n  */\n  get isFocused() {\n    return this.state.isFocused;\n  }\n  /**\n  * Sets whether the collection is focused.\n  */\n  setFocused(isFocused) {\n    this.state.setFocused(isFocused);\n  }\n  /**\n  * The current focused key in the collection.\n  */\n  get focusedKey() {\n    return this.state.focusedKey;\n  }\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy() {\n    return this.state.childFocusStrategy;\n  }\n  /**\n  * Sets the focused key.\n  */\n  setFocusedKey(key, childFocusStrategy) {\n    if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n  }\n  /**\n  * The currently selected keys in the collection.\n  */\n  get selectedKeys() {\n    return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n  }\n  /**\n  * The raw selection value for the collection.\n  * Either 'all' for select all, or a set of keys.\n  */\n  get rawSelection() {\n    return this.state.selectedKeys;\n  }\n  /**\n  * Returns whether a key is selected.\n  */\n  isSelected(key) {\n    if (this.state.selectionMode === 'none') return false;\n    let mappedKey = this.getKey(key);\n    if (mappedKey == null) return false;\n    return this.state.selectedKeys === 'all' ? this.canSelectItem(mappedKey) : this.state.selectedKeys.has(mappedKey);\n  }\n  /**\n  * Whether the selection is empty.\n  */\n  get isEmpty() {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n  /**\n  * Whether all items in the collection are selected.\n  */\n  get isSelectAll() {\n    if (this.isEmpty) return false;\n    if (this.state.selectedKeys === 'all') return true;\n    if (this._isSelectAll != null) return this._isSelectAll;\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n  get firstSelectedKey() {\n    let first = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item && (0, $jkhUT$compareNodeOrder)(this.collection, item, first) < 0) first = item;\n    }\n    var _first_key;\n    return (_first_key = first === null || first === void 0 ? void 0 : first.key) !== null && _first_key !== void 0 ? _first_key : null;\n  }\n  get lastSelectedKey() {\n    let last = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item && (0, $jkhUT$compareNodeOrder)(this.collection, item, last) > 0) last = item;\n    }\n    var _last_key;\n    return (_last_key = last === null || last === void 0 ? void 0 : last.key) !== null && _last_key !== void 0 ? _last_key : null;\n  }\n  get disabledKeys() {\n    return this.state.disabledKeys;\n  }\n  get disabledBehavior() {\n    return this.state.disabledBehavior;\n  }\n  /**\n  * Extends the selection to the given key.\n  */\n  extendSelection(toKey) {\n    if (this.selectionMode === 'none') return;\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n    let mappedToKey = this.getKey(toKey);\n    if (mappedToKey == null) return;\n    let selection;\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([mappedToKey], mappedToKey, mappedToKey);else {\n      let selectedKeys = this.state.selectedKeys;\n      var _selectedKeys_anchorKey;\n      let anchorKey = (_selectedKeys_anchorKey = selectedKeys.anchorKey) !== null && _selectedKeys_anchorKey !== void 0 ? _selectedKeys_anchorKey : mappedToKey;\n      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, mappedToKey);\n      var _selectedKeys_currentKey;\n      for (let key of this.getKeyRange(anchorKey, (_selectedKeys_currentKey = selectedKeys.currentKey) !== null && _selectedKeys_currentKey !== void 0 ? _selectedKeys_currentKey : mappedToKey)) selection.delete(key);\n      for (let key of this.getKeyRange(mappedToKey, anchorKey)) if (this.canSelectItem(key)) selection.add(key);\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getKeyRange(from, to) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if ((0, $jkhUT$compareNodeOrder)(this.collection, fromItem, toItem) <= 0) return this.getKeyRangeInternal(from, to);\n      return this.getKeyRangeInternal(to, from);\n    }\n    return [];\n  }\n  getKeyRangeInternal(from, to) {\n    var _this_layoutDelegate;\n    if ((_this_layoutDelegate = this.layoutDelegate) === null || _this_layoutDelegate === void 0 ? void 0 : _this_layoutDelegate.getKeyRange) return this.layoutDelegate.getKeyRange(from, to);\n    let keys = [];\n    let key = from;\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item && (item.type === 'item' || item.type === 'cell' && this.allowsCellSelection)) keys.push(key);\n      if (key === to) return keys;\n      key = this.collection.getKeyAfter(key);\n    }\n    return [];\n  }\n  getKey(key) {\n    let item = this.collection.getItem(key);\n    if (!item)\n      // ¯\\_(ツ)_/¯\n      return key;\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) return key;\n    // Find a parent item to select\n    while (item && item.type !== 'item' && item.parentKey != null) item = this.collection.getItem(item.parentKey);\n    if (!item || item.type !== 'item') return null;\n    return item.key;\n  }\n  /**\n  * Toggles whether the given key is selected.\n  */\n  toggleSelection(key) {\n    if (this.selectionMode === 'none') return;\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n    let mappedKey = this.getKey(key);\n    if (mappedKey == null) return;\n    let keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(mappedKey)) keys.delete(mappedKey);else if (this.canSelectItem(mappedKey)) {\n      keys.add(mappedKey);\n      keys.anchorKey = mappedKey;\n      keys.currentKey = mappedKey;\n    }\n    if (this.disallowEmptySelection && keys.size === 0) return;\n    this.state.setSelectedKeys(keys);\n  }\n  /**\n  * Replaces the selection with only the given key.\n  */\n  replaceSelection(key) {\n    if (this.selectionMode === 'none') return;\n    let mappedKey = this.getKey(key);\n    if (mappedKey == null) return;\n    let selection = this.canSelectItem(mappedKey) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([mappedKey], mappedKey, mappedKey) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n    this.state.setSelectedKeys(selection);\n  }\n  /**\n  * Replaces the selection with the given keys.\n  */\n  setSelectedKeys(keys) {\n    if (this.selectionMode === 'none') return;\n    let selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n    for (let key of keys) {\n      let mappedKey = this.getKey(key);\n      if (mappedKey != null) {\n        selection.add(mappedKey);\n        if (this.selectionMode === 'single') break;\n      }\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getSelectAllKeys() {\n    let keys = [];\n    let addKeys = key => {\n      while (key != null) {\n        if (this.canSelectItem(key)) {\n          var _getFirstItem;\n          let item = this.collection.getItem(key);\n          if ((item === null || item === void 0 ? void 0 : item.type) === 'item') keys.push(key);\n          var _getFirstItem_key;\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if ((item === null || item === void 0 ? void 0 : item.hasChildNodes) && (this.allowsCellSelection || item.type !== 'item')) addKeys((_getFirstItem_key = (_getFirstItem = (0, $jkhUT$getFirstItem)((0, $jkhUT$getChildNodes)(item, this.collection))) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key) !== null && _getFirstItem_key !== void 0 ? _getFirstItem_key : null);\n        }\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n  /**\n  * Selects all items in the collection.\n  */\n  selectAll() {\n    if (!this.isSelectAll && this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n  }\n  /**\n  * Removes all keys from the selection.\n  */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n  }\n  /**\n  * Toggles between select all and an empty selection.\n  */\n  toggleSelectAll() {\n    if (this.isSelectAll) this.clearSelection();else this.selectAll();\n  }\n  select(key, e) {\n    if (this.selectionMode === 'none') return;\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n    } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);else this.replaceSelection(key);\n  }\n  /**\n  * Returns whether the current selection is equal to the given selection.\n  */\n  isSelectionEqual(selection) {\n    if (selection === this.state.selectedKeys) return true;\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) return false;\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) return false;\n    }\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) return false;\n    }\n    return true;\n  }\n  canSelectItem(key) {\n    var _item_props;\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n    let item = this.collection.getItem(key);\n    if (!item || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || item.type === 'cell' && !this.allowsCellSelection) return false;\n    return true;\n  }\n  isDisabled(key) {\n    var _this_collection_getItem_props, _this_collection_getItem;\n    return this.state.disabledBehavior === 'all' && (this.state.disabledKeys.has(key) || !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.isDisabled));\n  }\n  isLink(key) {\n    var _this_collection_getItem_props, _this_collection_getItem;\n    return !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.href);\n  }\n  getItemProps(key) {\n    var _this_collection_getItem;\n    return (_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : _this_collection_getItem.props;\n  }\n  withCollection(collection) {\n    return new $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, this.state, {\n      allowsCellSelection: this.allowsCellSelection,\n      layoutDelegate: this.layoutDelegate || undefined\n    });\n  }\n  constructor(collection, state, options) {\n    this.collection = collection;\n    this.state = state;\n    var _options_allowsCellSelection;\n    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;\n    this._isSelectAll = null;\n    this.layoutDelegate = (options === null || options === void 0 ? void 0 : options.layoutDelegate) || null;\n  }\n}\nexport { $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"names":["$d496c0a20b6e58ec$export$6c8a5aaad13c9852","selectionMode","state","disallowEmptySelection","selectionBehavior","setSelectionBehavior","isFocused","setFocused","focusedKey","childFocusStrategy","setFocusedKey","key","collection","getItem","selectedKeys","Set","getSelectAllKeys","rawSelection","isSelected","mappedKey","getKey","canSelectItem","has","isEmpty","size","isSelectAll","_isSelectAll","allKeys","every","k","firstSelectedKey","first","item","$jkhUT$compareNodeOrder","_first_key","lastSelectedKey","last","_last_key","disabledKeys","disabledBehavior","extendSelection","toKey","replaceSelection","mappedToKey","selection","$e40ea825a81a3709$export$52baac22726c72bf","_selectedKeys_anchorKey","anchorKey","_selectedKeys_currentKey","getKeyRange","currentKey","delete","add","setSelectedKeys","from","to","fromItem","toItem","getKeyRangeInternal","_this_layoutDelegate","layoutDelegate","keys","type","allowsCellSelection","push","getKeyAfter","parentKey","toggleSelection","addKeys","_getFirstItem","_getFirstItem_key","hasChildNodes","$jkhUT$getFirstItem","$jkhUT$getChildNodes","getFirstKey","selectAll","clearSelection","toggleSelectAll","select","e","pointerType","isSelectionEqual","_item_props","props","isDisabled","_this_collection_getItem_props","_this_collection_getItem","isLink","href","getItemProps","withCollection","undefined","constructor","options","_options_allowsCellSelection"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-stately/selection/dist/packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection, DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  Key,\n  LayoutDelegate,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {compareNodeOrder, getChildNodes, getFirstItem} from '@react-stately/collections';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean,\n  layoutDelegate?: LayoutDelegate\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean | null;\n  private layoutDelegate: LayoutDelegate | null;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n    this.layoutDelegate = options?.layoutDelegate || null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior): void {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean): void {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key | null {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy | null {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key | null, childFocusStrategy?: FocusStrategy): void {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key): boolean {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    let mappedKey = this.getKey(key);\n    if (mappedKey == null) {\n      return false;\n    }\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(mappedKey)\n      : this.state.selectedKeys.has(mappedKey);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || (item && compareNodeOrder(this.collection, item, first) < 0)) {\n        first = item;\n      }\n    }\n\n    return first?.key ?? null;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || (item && compareNodeOrder(this.collection, item, last) > 0)) {\n        last = item;\n      }\n    }\n\n    return last?.key ?? null;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key): void {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    let mappedToKey = this.getKey(toKey);\n    if (mappedToKey == null) {\n      return;\n    }\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([mappedToKey], mappedToKey, mappedToKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey ?? mappedToKey;\n      selection = new Selection(selectedKeys, anchorKey, mappedToKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey ?? mappedToKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(mappedToKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (compareNodeOrder(this.collection, fromItem, toItem) <= 0) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    if (this.layoutDelegate?.getKeyRange) {\n      return this.layoutDelegate.getKeyRange(from, to);\n    }\n\n    let keys: Key[] = [];\n    let key: Key | null = from;\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item && (item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection))) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item && item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key): void {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    let mappedKey = this.getKey(key);\n    if (mappedKey == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(mappedKey)) {\n      keys.delete(mappedKey);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(mappedKey)) {\n      keys.add(mappedKey);\n      keys.anchorKey = mappedKey;\n      keys.currentKey = mappedKey;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key): void {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let mappedKey = this.getKey(key);\n    if (mappedKey == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(mappedKey)\n      ? new Selection([mappedKey], mappedKey, mappedKey)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>): void {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      let mappedKey = this.getKey(key);\n      if (mappedKey != null) {\n        selection.add(mappedKey);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key | null) => {\n      while (key != null) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item?.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item?.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys(getFirstItem(getChildNodes(item, this.collection))?.key ?? null);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll(): void {\n    if (!this.isSelectAll && this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection(): void {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll(): void {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent): void {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>): boolean {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key): boolean {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || item?.props?.isDisabled || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key): boolean {\n    return this.state.disabledBehavior === 'all' && (this.state.disabledKeys.has(key) || !!this.collection.getItem(key)?.props?.isDisabled);\n  }\n\n  isLink(key: Key): boolean {\n    return !!this.collection.getItem(key)?.props?.href;\n  }\n\n  getItemProps(key: Key): any {\n    return this.collection.getItem(key)?.props;\n  }\n\n  withCollection(collection: Collection<Node<unknown>>): SelectionManager {\n    return new SelectionManager(collection, this.state, {\n      allowsCellSelection: this.allowsCellSelection,\n      layoutDelegate: this.layoutDelegate || undefined\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}