{"ast":null,"code":"import { useControlledState as $69RjW$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $69RjW$useMemo } from \"react\";\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ad999b7f496648d1$export$8deac67f4addf270(props) {\n  let {\n    selectionMode = 'single',\n    disallowEmptySelection: disallowEmptySelection,\n    isDisabled = false\n  } = props;\n  let [selectedKeys, setSelectedKeys] = (0, $69RjW$useControlledState)((0, $69RjW$useMemo)(() => props.selectedKeys ? new Set(props.selectedKeys) : undefined, [props.selectedKeys]), (0, $69RjW$useMemo)(() => props.defaultSelectedKeys ? new Set(props.defaultSelectedKeys) : new Set(), [props.defaultSelectedKeys]), props.onSelectionChange);\n  return {\n    selectionMode: selectionMode,\n    isDisabled: isDisabled,\n    selectedKeys: selectedKeys,\n    setSelectedKeys: setSelectedKeys,\n    toggleKey(key) {\n      let keys;\n      if (selectionMode === 'multiple') {\n        keys = new Set(selectedKeys);\n        if (keys.has(key) && (!disallowEmptySelection || keys.size > 1)) keys.delete(key);else keys.add(key);\n      } else keys = new Set(selectedKeys.has(key) && !disallowEmptySelection ? [] : [key]);\n      setSelectedKeys(keys);\n    },\n    setSelected(key, isSelected) {\n      if (isSelected !== selectedKeys.has(key)) this.toggleKey(key);\n    }\n  };\n}\nexport { $ad999b7f496648d1$export$8deac67f4addf270 as useToggleGroupState };","map":{"version":3,"names":["$ad999b7f496648d1$export$8deac67f4addf270","props","selectionMode","disallowEmptySelection","isDisabled","selectedKeys","setSelectedKeys","$69RjW$useControlledState","$69RjW$useMemo","Set","undefined","defaultSelectedKeys","onSelectionChange","toggleKey","key","keys","has","size","delete","add","setSelected","isSelected"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-stately/toggle/dist/packages/@react-stately/toggle/src/useToggleGroupState.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo} from 'react';\n\nexport interface ToggleGroupProps {\n  /** Whether single or multiple selection is enabled. */\n  selectionMode?: 'single' | 'multiple',\n  /** Whether the collection allows empty selection. */\n  disallowEmptySelection?: boolean,\n  /** The currently selected keys in the collection (controlled). */\n  selectedKeys?: Iterable<Key>,\n  /** The initial selected keys in the collection (uncontrolled). */\n  defaultSelectedKeys?: Iterable<Key>,\n  /** Handler that is called when the selection changes. */\n  onSelectionChange?: (keys: Set<Key>) => void,\n  /** Whether all items are disabled. */\n  isDisabled?: boolean\n}\n\nexport interface ToggleGroupState {\n  /** Whether single or multiple selection is enabled. */\n  readonly selectionMode: 'single' | 'multiple',\n\n  /** Whether all items are disabled. */\n  readonly isDisabled: boolean,\n  \n  /** A set of keys for items that are selected. */\n  readonly selectedKeys: Set<Key>,\n\n  /** Toggles the selected state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** Sets whether the given key is selected. */\n  setSelected(key: Key, isSelected: boolean): void,\n\n  /** Replaces the set of selected keys. */\n  setSelectedKeys(keys: Set<Key>): void\n}\n\n/**\n * Manages state for a group of toggles.\n * It supports both single and multiple selected items.\n */\nexport function useToggleGroupState(props: ToggleGroupProps): ToggleGroupState {\n  let {selectionMode = 'single', disallowEmptySelection, isDisabled = false} = props;\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    useMemo(() => props.selectedKeys ? new Set(props.selectedKeys) : undefined, [props.selectedKeys]),\n    useMemo(() => props.defaultSelectedKeys ? new Set(props.defaultSelectedKeys) : new Set(), [props.defaultSelectedKeys]),\n    props.onSelectionChange\n  );\n\n  return {\n    selectionMode,\n    isDisabled,\n    selectedKeys,\n    setSelectedKeys,\n    toggleKey(key) {\n      let keys: Set<Key>;\n      if (selectionMode === 'multiple') {\n        keys = new Set(selectedKeys);\n        if (keys.has(key) && (!disallowEmptySelection || keys.size > 1)) {\n          keys.delete(key);\n        } else {\n          keys.add(key);\n        }\n      } else {\n        keys = new Set(selectedKeys.has(key) && !disallowEmptySelection ? [] : [key]);\n      }\n  \n      setSelectedKeys(keys);\n    },\n    setSelected(key, isSelected) {\n      if (isSelected !== selectedKeys.has(key)) {\n        this.toggleKey(key);\n      }\n    }\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AAuDO,SAASA,0CAAoBC,KAAuB;EACzD,IAAI;IAACC,aAAA,GAAgB;IAAAC,sBAAA,EAAUA,sBAAsB;IAAEC,UAAA,GAAa;EAAA,CAAM,GAAGH,KAAA;EAC7E,IAAI,CAACI,YAAA,EAAcC,eAAA,CAAgB,GAAG,IAAAC,yBAAiB,EACrD,IAAAC,cAAM,EAAE,MAAMP,KAAA,CAAMI,YAAY,GAAG,IAAII,GAAA,CAAIR,KAAA,CAAMI,YAAY,IAAIK,SAAA,EAAW,CAACT,KAAA,CAAMI,YAAY,CAAC,GAChG,IAAAG,cAAM,EAAE,MAAMP,KAAA,CAAMU,mBAAmB,GAAG,IAAIF,GAAA,CAAIR,KAAA,CAAMU,mBAAmB,IAAI,IAAIF,GAAA,IAAO,CAACR,KAAA,CAAMU,mBAAmB,CAAC,GACrHV,KAAA,CAAMW,iBAAiB;EAGzB,OAAO;mBACLV,aAAA;gBACAE,UAAA;kBACAC,YAAA;qBACAC,eAAA;IACAO,UAAUC,GAAG;MACX,IAAIC,IAAA;MACJ,IAAIb,aAAA,KAAkB,YAAY;QAChCa,IAAA,GAAO,IAAIN,GAAA,CAAIJ,YAAA;QACf,IAAIU,IAAA,CAAKC,GAAG,CAACF,GAAA,MAAS,CAACX,sBAAA,IAA0BY,IAAA,CAAKE,IAAI,GAAG,IAC3DF,IAAA,CAAKG,MAAM,CAACJ,GAAA,OAEZC,IAAA,CAAKI,GAAG,CAACL,GAAA;MAEb,OACEC,IAAA,GAAO,IAAIN,GAAA,CAAIJ,YAAA,CAAaW,GAAG,CAACF,GAAA,KAAQ,CAACX,sBAAA,GAAyB,EAAE,GAAG,CAACW,GAAA,CAAI;MAG9ER,eAAA,CAAgBS,IAAA;IAClB;IACAK,YAAYN,GAAG,EAAEO,UAAU;MACzB,IAAIA,UAAA,KAAehB,YAAA,CAAaW,GAAG,CAACF,GAAA,GAClC,IAAI,CAACD,SAAS,CAACC,GAAA;IAEnB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}