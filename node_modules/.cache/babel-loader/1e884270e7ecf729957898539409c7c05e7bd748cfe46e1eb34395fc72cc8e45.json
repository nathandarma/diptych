{"ast":null,"code":"import { menuData as $fc79756100351201$export$6f49b4016bfc8d56 } from \"./utils.mjs\";\nimport { filterDOMProps as $ieN2F$filterDOMProps, mergeProps as $ieN2F$mergeProps } from \"@react-aria/utils\";\nimport { useSelectableList as $ieN2F$useSelectableList } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d5336fe17ce95402$export$38eaa17faae8f579(props, state, ref) {\n  let {\n    shouldFocusWrap = true,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    ...otherProps\n  } = props;\n  if (!props['aria-label'] && !props['aria-labelledby'] && process.env.NODE_ENV !== 'production') console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  let domProps = (0, $ieN2F$filterDOMProps)(props, {\n    labelable: true\n  });\n  let {\n    listProps: listProps\n  } = (0, $ieN2F$useSelectableList)({\n    ...otherProps,\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap: shouldFocusWrap,\n    linkBehavior: 'override'\n  });\n  (0, $fc79756100351201$export$6f49b4016bfc8d56).set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus\n  });\n  return {\n    menuProps: (0, $ieN2F$mergeProps)(domProps, {\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp\n    }, {\n      role: 'menu',\n      ...listProps,\n      onKeyDown: e => {\n        var _listProps_onKeyDown;\n        // don't clear the menu selected keys if the user is presses escape since escape closes the menu\n        if (e.key !== 'Escape' || props.shouldUseVirtualFocus) (_listProps_onKeyDown = listProps.onKeyDown) === null || _listProps_onKeyDown === void 0 ? void 0 : _listProps_onKeyDown.call(listProps, e);\n      }\n    })\n  };\n}\nexport { $d5336fe17ce95402$export$38eaa17faae8f579 as useMenu };","map":{"version":3,"names":["$d5336fe17ce95402$export$38eaa17faae8f579","props","state","ref","shouldFocusWrap","onKeyDown","onKeyUp","otherProps","process","env","NODE_ENV","console","warn","domProps","$ieN2F$filterDOMProps","labelable","listProps","$ieN2F$useSelectableList","selectionManager","collection","disabledKeys","linkBehavior","$fc79756100351201$export$6f49b4016bfc8d56","set","onClose","onAction","shouldUseVirtualFocus","menuProps","$ieN2F$mergeProps","role","e","_listProps_onKeyDown","key","call"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/src/useMenu.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuProps} from '@react-types/menu';\nimport {DOMAttributes, KeyboardDelegate, KeyboardEvents, RefObject} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {menuData} from './utils';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface MenuAria {\n  /** Props for the menu element. */\n  menuProps: DOMAttributes\n}\n\nexport interface AriaMenuOptions<T> extends Omit<AriaMenuProps<T>, 'children'>, KeyboardEvents {\n  /** Whether the menu uses virtual scrolling. */\n  isVirtualized?: boolean,\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the menu items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu component.\n * A menu displays a list of actions or options that a user can choose.\n * @param props - Props for the menu.\n * @param state - State for the menu, as returned by `useListState`.\n */\nexport function useMenu<T>(props: AriaMenuOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement | null>): MenuAria {\n  let {\n    shouldFocusWrap = true,\n    onKeyDown,\n    onKeyUp,\n    ...otherProps\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby'] && process.env.NODE_ENV !== 'production') {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...otherProps,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap,\n    linkBehavior: 'override'\n  });\n\n  menuData.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus\n  });\n\n  return {\n    menuProps: mergeProps(domProps, {onKeyDown, onKeyUp}, {\n      role: 'menu',\n      ...listProps,\n      onKeyDown: (e) => {\n        // don't clear the menu selected keys if the user is presses escape since escape closes the menu\n        if (e.key !== 'Escape' || props.shouldUseVirtualFocus) {\n          listProps.onKeyDown?.(e);\n        }\n      }\n    })\n  };\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AA4CO,SAASA,0CAAWC,KAAyB,EAAEC,KAAmB,EAAEC,GAAkC;EAC3G,IAAI;IACFC,eAAA,GAAkB;IAAAC,SAAA,EAClBA,SAAS;IAAAC,OAAA,EACTA,OAAO;IACP,GAAGC;EAAA,CACJ,GAAGN,KAAA;EAEJ,IAAI,CAACA,KAAK,CAAC,aAAa,IAAI,CAACA,KAAK,CAAC,kBAAkB,IAAIO,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,cAChFC,OAAA,CAAQC,IAAI,CAAC;EAGf,IAAIC,QAAA,GAAW,IAAAC,qBAAa,EAAEb,KAAA,EAAO;IAACc,SAAA,EAAW;EAAI;EACrD,IAAI;IAAAC,SAAA,EAACA;EAAS,CAAC,GAAG,IAAAC,wBAAgB,EAAE;IAClC,GAAGV,UAAU;SACbJ,GAAA;IACAe,gBAAA,EAAkBhB,KAAA,CAAMgB,gBAAgB;IACxCC,UAAA,EAAYjB,KAAA,CAAMiB,UAAU;IAC5BC,YAAA,EAAclB,KAAA,CAAMkB,YAAY;qBAChChB,eAAA;IACAiB,YAAA,EAAc;EAChB;EAEA,IAAAC,yCAAO,EAAEC,GAAG,CAACrB,KAAA,EAAO;IAClBsB,OAAA,EAASvB,KAAA,CAAMuB,OAAO;IACtBC,QAAA,EAAUxB,KAAA,CAAMwB,QAAQ;IACxBC,qBAAA,EAAuBzB,KAAA,CAAMyB;EAC/B;EAEA,OAAO;IACLC,SAAA,EAAW,IAAAC,iBAAS,EAAEf,QAAA,EAAU;iBAACR,SAAA;eAAWC;IAAO,GAAG;MACpDuB,IAAA,EAAM;MACN,GAAGb,SAAS;MACZX,SAAA,EAAYyB,CAAA;YAGRC,oBAAA;QAFF;QACA,IAAID,CAAA,CAAEE,GAAG,KAAK,YAAY/B,KAAA,CAAMyB,qBAAqB,GACnDK,oBAAA,GAAAf,SAAA,CAAUX,SAAS,cAAnB0B,oBAAA,uBAAAA,oBAAA,CAAAE,IAAA,CAAAjB,SAAA,EAAsBc,CAAA;MAE1B;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}