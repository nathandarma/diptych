{"ast":null,"code":"import $4stjr$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { announce as $4stjr$announce } from \"@react-aria/live-announcer\";\nimport { useEffectEvent as $4stjr$useEffectEvent, useUpdateEffect as $4stjr$useUpdateEffect } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $4stjr$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useRef as $4stjr$useRef } from \"react\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $92599c3fd427b763$export$137e594ef3218a10(props, state) {\n  let {\n    getRowText = key => {\n      var _state_collection_getTextValue, _state_collection, _state_collection_getItem;\n      var _state_collection_getTextValue1;\n      return (_state_collection_getTextValue1 = (_state_collection_getTextValue = (_state_collection = state.collection).getTextValue) === null || _state_collection_getTextValue === void 0 ? void 0 : _state_collection_getTextValue.call(_state_collection, key)) !== null && _state_collection_getTextValue1 !== void 0 ? _state_collection_getTextValue1 : (_state_collection_getItem = state.collection.getItem(key)) === null || _state_collection_getItem === void 0 ? void 0 : _state_collection_getItem.textValue;\n    }\n  } = props;\n  let stringFormatter = (0, $4stjr$useLocalizedStringFormatter)((0, $parcel$interopDefault($4stjr$intlStringsmodulejs)), '@react-aria/grid');\n  // Many screen readers do not announce when items in a grid are selected/deselected.\n  // We do this using an ARIA live region.\n  let selection = state.selectionManager.rawSelection;\n  let lastSelection = (0, $4stjr$useRef)(selection);\n  let announceSelectionChange = (0, $4stjr$useEffectEvent)(() => {\n    var _lastSelection_current;\n    if (!state.selectionManager.isFocused || selection === lastSelection.current) {\n      lastSelection.current = selection;\n      return;\n    }\n    let addedKeys = $92599c3fd427b763$var$diffSelection(selection, lastSelection.current);\n    let removedKeys = $92599c3fd427b763$var$diffSelection(lastSelection.current, selection);\n    // If adding or removing a single row from the selection, announce the name of that item.\n    let isReplace = state.selectionManager.selectionBehavior === 'replace';\n    let messages = [];\n    if (state.selectionManager.selectedKeys.size === 1 && isReplace) {\n      let firstKey = state.selectionManager.selectedKeys.keys().next().value;\n      if (firstKey != null && state.collection.getItem(firstKey)) {\n        let currentSelectionText = getRowText(firstKey);\n        if (currentSelectionText) messages.push(stringFormatter.format('selectedItem', {\n          item: currentSelectionText\n        }));\n      }\n    } else if (addedKeys.size === 1 && removedKeys.size === 0) {\n      let firstKey = addedKeys.keys().next().value;\n      if (firstKey != null) {\n        let addedText = getRowText(firstKey);\n        if (addedText) messages.push(stringFormatter.format('selectedItem', {\n          item: addedText\n        }));\n      }\n    } else if (removedKeys.size === 1 && addedKeys.size === 0) {\n      let firstKey = removedKeys.keys().next().value;\n      if (firstKey != null && state.collection.getItem(firstKey)) {\n        let removedText = getRowText(firstKey);\n        if (removedText) messages.push(stringFormatter.format('deselectedItem', {\n          item: removedText\n        }));\n      }\n    }\n    // Announce how many items are selected, except when selecting the first item.\n    if (state.selectionManager.selectionMode === 'multiple') {\n      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || ((_lastSelection_current = lastSelection.current) === null || _lastSelection_current === void 0 ? void 0 : _lastSelection_current.size) > 1) messages.push(selection === 'all' ? stringFormatter.format('selectedAll') : stringFormatter.format('selectedCount', {\n        count: selection.size\n      }));\n    }\n    if (messages.length > 0) (0, $4stjr$announce)(messages.join(' '));\n    lastSelection.current = selection;\n  });\n  (0, $4stjr$useUpdateEffect)(() => {\n    if (state.selectionManager.isFocused) announceSelectionChange();else {\n      // Wait a frame in case the collection is about to become focused (e.g. on mouse down).\n      let raf = requestAnimationFrame(announceSelectionChange);\n      return () => cancelAnimationFrame(raf);\n    }\n  }, [selection, state.selectionManager.isFocused]);\n}\nfunction $92599c3fd427b763$var$diffSelection(a, b) {\n  let res = new Set();\n  if (a === 'all' || b === 'all') return res;\n  for (let key of a.keys()) if (!b.has(key)) res.add(key);\n  return res;\n}\nexport { $92599c3fd427b763$export$137e594ef3218a10 as useGridSelectionAnnouncement };","map":{"version":3,"names":["$92599c3fd427b763$export$137e594ef3218a10","props","state","getRowText","key","_state_collection_getTextValue","_state_collection","_state_collection_getItem","_state_collection_getTextValue1","collection","getTextValue","call","getItem","textValue","stringFormatter","$4stjr$useLocalizedStringFormatter","$parcel$interopDefault","$4stjr$intlStringsmodulejs","selection","selectionManager","rawSelection","lastSelection","$4stjr$useRef","announceSelectionChange","$4stjr$useEffectEvent","_lastSelection_current","isFocused","current","addedKeys","$92599c3fd427b763$var$diffSelection","removedKeys","isReplace","selectionBehavior","messages","selectedKeys","size","firstKey","keys","next","value","currentSelectionText","push","format","item","addedText","removedText","selectionMode","length","count","$4stjr$announce","join","$4stjr$useUpdateEffect","raf","requestAnimationFrame","cancelAnimationFrame","a","b","res","Set","has","add"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/grid/dist/packages/@react-aria/grid/src/useGridSelectionAnnouncement.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce} from '@react-aria/live-announcer';\nimport {Collection, Key, Node, Selection} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {SelectionManager} from '@react-stately/selection';\nimport {useEffectEvent, useUpdateEffect} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useRef} from 'react';\n\nexport interface GridSelectionAnnouncementProps {\n  /**\n   * A function that returns the text that should be announced by assistive technology when a row is added or removed from selection.\n   * @default (key) => state.collection.getItem(key)?.textValue\n   */\n  getRowText?: (key: Key) => string\n}\n\ninterface GridSelectionState<T> {\n  /** A collection of items in the grid. */\n  collection: Collection<Node<T>>,\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\nexport function useGridSelectionAnnouncement<T>(props: GridSelectionAnnouncementProps, state: GridSelectionState<T>): void {\n  let {\n    getRowText = (key) => state.collection.getTextValue?.(key) ?? state.collection.getItem(key)?.textValue\n  } = props;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/grid');\n\n  // Many screen readers do not announce when items in a grid are selected/deselected.\n  // We do this using an ARIA live region.\n  let selection = state.selectionManager.rawSelection;\n  let lastSelection = useRef(selection);\n  let announceSelectionChange = useEffectEvent(() => {\n    if (!state.selectionManager.isFocused || selection === lastSelection.current) {\n      lastSelection.current = selection;\n\n      return;\n    }\n\n    let addedKeys = diffSelection(selection, lastSelection.current);\n    let removedKeys = diffSelection(lastSelection.current, selection);\n\n    // If adding or removing a single row from the selection, announce the name of that item.\n    let isReplace = state.selectionManager.selectionBehavior === 'replace';\n    let messages: string[] = [];\n\n    if ((state.selectionManager.selectedKeys.size === 1 && isReplace)) {\n      let firstKey = state.selectionManager.selectedKeys.keys().next().value;\n      if (firstKey != null && state.collection.getItem(firstKey)) {\n        let currentSelectionText = getRowText(firstKey);\n        if (currentSelectionText) {\n          messages.push(stringFormatter.format('selectedItem', {item: currentSelectionText}));\n        }\n      }\n    } else if (addedKeys.size === 1 && removedKeys.size === 0) {\n      let firstKey = addedKeys.keys().next().value;\n      if (firstKey != null) {\n        let addedText = getRowText(firstKey);\n        if (addedText) {\n          messages.push(stringFormatter.format('selectedItem', {item: addedText}));\n        }\n      }\n    } else if (removedKeys.size === 1 && addedKeys.size === 0) {\n      let firstKey = removedKeys.keys().next().value;\n      if (firstKey != null && state.collection.getItem(firstKey)) {\n        let removedText = getRowText(firstKey);\n        if (removedText) {\n          messages.push(stringFormatter.format('deselectedItem', {item: removedText}));\n        }\n      }\n    }\n\n    // Announce how many items are selected, except when selecting the first item.\n    if (state.selectionManager.selectionMode === 'multiple') {\n      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || lastSelection.current?.size > 1) {\n        messages.push(selection === 'all'\n          ? stringFormatter.format('selectedAll')\n          : stringFormatter.format('selectedCount', {count: selection.size})\n        );\n      }\n    }\n\n    if (messages.length > 0) {\n      announce(messages.join(' '));\n    }\n\n    lastSelection.current = selection;\n  });\n\n  useUpdateEffect(() => {\n    if (state.selectionManager.isFocused) {\n      announceSelectionChange();\n    } else {\n      // Wait a frame in case the collection is about to become focused (e.g. on mouse down).\n      let raf = requestAnimationFrame(announceSelectionChange);\n      return () => cancelAnimationFrame(raf);\n    }\n  }, [selection, state.selectionManager.isFocused]);\n}\n\nfunction diffSelection(a: Selection, b: Selection): Set<Key> {\n  let res = new Set<Key>();\n  if (a === 'all' || b === 'all') {\n    return res;\n  }\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}