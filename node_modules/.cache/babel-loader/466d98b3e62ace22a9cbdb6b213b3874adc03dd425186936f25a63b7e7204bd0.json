{"ast":null,"code":"import { radioGroupData as $884aeceb3d67f00f$export$37b65e5b5444d35c } from \"./utils.mjs\";\nimport { mergeProps as $5jJ3f$mergeProps, filterDOMProps as $5jJ3f$filterDOMProps, useFormReset as $5jJ3f$useFormReset } from \"@react-aria/utils\";\nimport { usePress as $5jJ3f$usePress, useFocusable as $5jJ3f$useFocusable } from \"@react-aria/interactions\";\nimport { useFormValidation as $5jJ3f$useFormValidation } from \"@react-aria/form\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {\n  let {\n    value: value,\n    children: children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n  const isDisabled = props.isDisabled || state.isDisabled;\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel && process.env.NODE_ENV !== 'production') console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  let checked = state.selectedValue === value;\n  let onChange = e => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n  // Handle press state for keyboard interactions and cases where labelProps is not used.\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $5jJ3f$usePress)({\n    isDisabled: isDisabled\n  });\n  // Handle press state on the label.\n  let {\n    pressProps: labelProps,\n    isPressed: isLabelPressed\n  } = (0, $5jJ3f$usePress)({\n    isDisabled: isDisabled,\n    onPress() {\n      var _ref_current;\n      state.setSelectedValue(value);\n      (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.focus();\n    }\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $5jJ3f$useFocusable)((0, $5jJ3f$mergeProps)(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = (0, $5jJ3f$mergeProps)(pressProps, focusableProps);\n  let domProps = (0, $5jJ3f$filterDOMProps)(props, {\n    labelable: true\n  });\n  let tabIndex = -1;\n  if (state.selectedValue != null) {\n    if (state.selectedValue === value) tabIndex = 0;\n  } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) tabIndex = 0;\n  if (isDisabled) tabIndex = undefined;\n  let {\n    name: name,\n    descriptionId: descriptionId,\n    errorMessageId: errorMessageId,\n    validationBehavior: validationBehavior\n  } = (0, $884aeceb3d67f00f$export$37b65e5b5444d35c).get(state);\n  (0, $5jJ3f$useFormReset)(ref, state.selectedValue, state.setSelectedValue);\n  (0, $5jJ3f$useFormValidation)({\n    validationBehavior: validationBehavior\n  }, state, ref);\n  return {\n    labelProps: (0, $5jJ3f$mergeProps)(labelProps, {\n      onClick: e => e.preventDefault()\n    }),\n    inputProps: (0, $5jJ3f$mergeProps)(domProps, {\n      ...interactions,\n      type: 'radio',\n      name: name,\n      tabIndex: tabIndex,\n      disabled: isDisabled,\n      required: state.isRequired && validationBehavior === 'native',\n      checked: checked,\n      value: value,\n      onChange: onChange,\n      'aria-describedby': [props['aria-describedby'], state.isInvalid ? errorMessageId : null, descriptionId].filter(Boolean).join(' ') || undefined\n    }),\n    isDisabled: isDisabled,\n    isSelected: checked,\n    isPressed: isPressed || isLabelPressed\n  };\n}\nexport { $0d5c49892c1215da$export$37b0961d2f4751e2 as useRadio };","map":{"version":3,"names":["$0d5c49892c1215da$export$37b0961d2f4751e2","props","state","ref","value","children","ariaLabel","ariaLabelledby","isDisabled","hasChildren","hasAriaLabel","process","env","NODE_ENV","console","warn","checked","selectedValue","onChange","e","stopPropagation","setSelectedValue","pressProps","isPressed","$5jJ3f$usePress","labelProps","isLabelPressed","onPress","_ref_current","current","focus","focusableProps","$5jJ3f$useFocusable","$5jJ3f$mergeProps","onFocus","setLastFocusedValue","interactions","domProps","$5jJ3f$filterDOMProps","labelable","tabIndex","lastFocusedValue","undefined","name","descriptionId","errorMessageId","validationBehavior","$884aeceb3d67f00f$export$37b65e5b5444d35c","get","$5jJ3f$useFormReset","$5jJ3f$useFormValidation","onClick","preventDefault","inputProps","type","disabled","required","isRequired","isInvalid","filter","Boolean","join","isSelected"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/radio/dist/packages/@react-aria/radio/src/useRadio.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps, useFormReset} from '@react-aria/utils';\nimport {InputHTMLAttributes, LabelHTMLAttributes} from 'react';\nimport {radioGroupData} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {RefObject} from '@react-types/shared';\nimport {useFocusable, usePress} from '@react-aria/interactions';\nimport {useFormValidation} from '@react-aria/form';\n\nexport interface RadioAria {\n  /** Props for the label wrapper element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the radio is disabled. */\n  isDisabled: boolean,\n  /** Whether the radio is currently selected. */\n  isSelected: boolean,\n  /** Whether the radio is in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(props: AriaRadioProps, state: RadioGroupState, ref: RefObject<HTMLInputElement | null>): RadioAria {\n  let {\n    value,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n\n  const isDisabled = props.isDisabled || state.isDisabled;\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel && process.env.NODE_ENV !== 'production') {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  let checked = state.selectedValue === value;\n\n  let onChange = (e) => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  // Handle press state for keyboard interactions and cases where labelProps is not used.\n  let {pressProps, isPressed} = usePress({\n    isDisabled\n  });\n\n  // Handle press state on the label.\n  let {pressProps: labelProps, isPressed: isLabelPressed} = usePress({\n    isDisabled,\n    onPress() {\n      state.setSelectedValue(value);\n      ref.current?.focus();\n    }\n  });\n\n  let {focusableProps} = useFocusable(mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n  let tabIndex: number | undefined = -1;\n  if (state.selectedValue != null) {\n    if (state.selectedValue === value) {\n      tabIndex = 0;\n    }\n  } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) {\n    tabIndex = 0;\n  }\n  if (isDisabled) {\n    tabIndex = undefined;\n  }\n\n  let {name, descriptionId, errorMessageId, validationBehavior} = radioGroupData.get(state)!;\n  useFormReset(ref, state.selectedValue, state.setSelectedValue);\n  useFormValidation({validationBehavior}, state, ref);\n\n  return {\n    labelProps: mergeProps(labelProps, {onClick: e => e.preventDefault()}),\n    inputProps: mergeProps(domProps, {\n      ...interactions,\n      type: 'radio',\n      name,\n      tabIndex,\n      disabled: isDisabled,\n      required: state.isRequired && validationBehavior === 'native',\n      checked,\n      value,\n      onChange,\n      'aria-describedby': [\n        props['aria-describedby'],\n        state.isInvalid ? errorMessageId : null,\n        descriptionId\n      ].filter(Boolean).join(' ') || undefined\n    }),\n    isDisabled,\n    isSelected: checked,\n    isPressed: isPressed || isLabelPressed\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}