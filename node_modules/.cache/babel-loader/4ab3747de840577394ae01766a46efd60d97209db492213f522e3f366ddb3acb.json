{"ast":null,"code":"import { getItemElement as $feb5ffebff200149$export$c3d8340acf92597f, isNonContiguousSelectionModifier as $feb5ffebff200149$export$d3e3bd3e26688c04, useCollectionId as $feb5ffebff200149$export$881eb0d9f3605d9d } from \"./utils.mjs\";\nimport { useTypeSelect as $fb3050f43d946246$export$e32c88dfddc6e1d8 } from \"./useTypeSelect.mjs\";\nimport { useRouter as $3H3GQ$useRouter, isCtrlKeyPressed as $3H3GQ$isCtrlKeyPressed, focusWithoutScrolling as $3H3GQ$focusWithoutScrolling, useEvent as $3H3GQ$useEvent, scrollIntoViewport as $3H3GQ$scrollIntoViewport, FOCUS_EVENT as $3H3GQ$FOCUS_EVENT, useEffectEvent as $3H3GQ$useEffectEvent, useUpdateLayoutEffect as $3H3GQ$useUpdateLayoutEffect, CLEAR_FOCUS_EVENT as $3H3GQ$CLEAR_FOCUS_EVENT, scrollIntoView as $3H3GQ$scrollIntoView, mergeProps as $3H3GQ$mergeProps } from \"@react-aria/utils\";\nimport { flushSync as $3H3GQ$flushSync } from \"react-dom\";\nimport { useRef as $3H3GQ$useRef, useEffect as $3H3GQ$useEffect } from \"react\";\nimport { getInteractionModality as $3H3GQ$getInteractionModality, focusSafely as $3H3GQ$focusSafely } from \"@react-aria/interactions\";\nimport { getFocusableTreeWalker as $3H3GQ$getFocusableTreeWalker, moveVirtualFocus as $3H3GQ$moveVirtualFocus } from \"@react-aria/focus\";\nimport { useLocale as $3H3GQ$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref: ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    escapeKeyBehavior = 'clearSelection',\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized: isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref,\n    linkBehavior = 'action'\n  } = options;\n  let {\n    direction: direction\n  } = (0, $3H3GQ$useLocale)();\n  let router = (0, $3H3GQ$useRouter)();\n  let onKeyDown = e => {\n    var _ref_current;\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') e.preventDefault();\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!((_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.contains(e.target))) return;\n    const navigateToKey = (key, childFocus) => {\n      if (key != null) {\n        if (manager.isLink(key) && linkBehavior === 'selection' && selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) {\n          // Set focused key and re-render synchronously to bring item into view if needed.\n          (0, $3H3GQ$flushSync)(() => {\n            manager.setFocusedKey(key, childFocus);\n          });\n          let item = (0, $feb5ffebff200149$export$c3d8340acf92597f)(ref, key);\n          let itemProps = manager.getItemProps(key);\n          if (item) router.open(item, e, itemProps.href, itemProps.routerOptions);\n          return;\n        }\n        manager.setFocusedKey(key, childFocus);\n        if (manager.isLink(key) && linkBehavior === 'override') return;\n        if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);else if (selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);\n      }\n    };\n    switch (e.key) {\n      case 'ArrowDown':\n        if (delegate.getKeyBelow) {\n          var _delegate_getKeyBelow, _delegate_getFirstKey, _delegate_getFirstKey1;\n          let nextKey = manager.focusedKey != null ? (_delegate_getKeyBelow = delegate.getKeyBelow) === null || _delegate_getKeyBelow === void 0 ? void 0 : _delegate_getKeyBelow.call(delegate, manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'ArrowUp':\n        if (delegate.getKeyAbove) {\n          var _delegate_getKeyAbove, _delegate_getLastKey, _delegate_getLastKey1;\n          let nextKey = manager.focusedKey != null ? (_delegate_getKeyAbove = delegate.getKeyAbove) === null || _delegate_getKeyAbove === void 0 ? void 0 : _delegate_getKeyAbove.call(delegate, manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'ArrowLeft':\n        if (delegate.getKeyLeftOf) {\n          var _delegate_getKeyLeftOf, _delegate_getFirstKey2, _delegate_getLastKey2;\n          let nextKey = manager.focusedKey != null ? (_delegate_getKeyLeftOf = delegate.getKeyLeftOf) === null || _delegate_getKeyLeftOf === void 0 ? void 0 : _delegate_getKeyLeftOf.call(delegate, manager.focusedKey) : null;\n          if (nextKey == null && shouldFocusWrap) nextKey = direction === 'rtl' ? (_delegate_getFirstKey2 = delegate.getFirstKey) === null || _delegate_getFirstKey2 === void 0 ? void 0 : _delegate_getFirstKey2.call(delegate, manager.focusedKey) : (_delegate_getLastKey2 = delegate.getLastKey) === null || _delegate_getLastKey2 === void 0 ? void 0 : _delegate_getLastKey2.call(delegate, manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n          }\n        }\n        break;\n      case 'ArrowRight':\n        if (delegate.getKeyRightOf) {\n          var _delegate_getKeyRightOf, _delegate_getLastKey3, _delegate_getFirstKey3;\n          let nextKey = manager.focusedKey != null ? (_delegate_getKeyRightOf = delegate.getKeyRightOf) === null || _delegate_getKeyRightOf === void 0 ? void 0 : _delegate_getKeyRightOf.call(delegate, manager.focusedKey) : null;\n          if (nextKey == null && shouldFocusWrap) nextKey = direction === 'rtl' ? (_delegate_getLastKey3 = delegate.getLastKey) === null || _delegate_getLastKey3 === void 0 ? void 0 : _delegate_getLastKey3.call(delegate, manager.focusedKey) : (_delegate_getFirstKey3 = delegate.getFirstKey) === null || _delegate_getFirstKey3 === void 0 ? void 0 : _delegate_getFirstKey3.call(delegate, manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n          }\n        }\n        break;\n      case 'Home':\n        if (delegate.getFirstKey) {\n          if (manager.focusedKey === null && e.shiftKey) return;\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, (0, $3H3GQ$isCtrlKeyPressed)(e));\n          manager.setFocusedKey(firstKey);\n          if (firstKey != null) {\n            if ((0, $3H3GQ$isCtrlKeyPressed)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          if (manager.focusedKey === null && e.shiftKey) return;\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, (0, $3H3GQ$isCtrlKeyPressed)(e));\n          manager.setFocusedKey(lastKey);\n          if (lastKey != null) {\n            if ((0, $3H3GQ$isCtrlKeyPressed)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow && manager.focusedKey != null) {\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove && manager.focusedKey != null) {\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'a':\n        if ((0, $3H3GQ$isCtrlKeyPressed)(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        if (escapeKeyBehavior === 'clearSelection' && !disallowEmptySelection && manager.selectedKeys.size !== 0) {\n          e.stopPropagation();\n          e.preventDefault();\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab':\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) ref.current.focus();else {\n            let walker = (0, $3H3GQ$getFocusableTreeWalker)(ref.current, {\n              tabbable: true\n            });\n            let next = undefined;\n            let last;\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n            if (next && !next.contains(document.activeElement)) (0, $3H3GQ$focusWithoutScrolling)(next);\n          }\n          break;\n        }\n    }\n  };\n  // Store the scroll position so we can restore it later.\n  /// TODO: should this happen all the time??\n  let scrollPos = (0, $3H3GQ$useRef)({\n    top: 0,\n    left: 0\n  });\n  (0, $3H3GQ$useEvent)(scrollRef, 'scroll', isVirtualized ? undefined : () => {\n    var _scrollRef_current, _scrollRef_current1;\n    var _scrollRef_current_scrollTop, _scrollRef_current_scrollLeft;\n    scrollPos.current = {\n      top: (_scrollRef_current_scrollTop = (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.scrollTop) !== null && _scrollRef_current_scrollTop !== void 0 ? _scrollRef_current_scrollTop : 0,\n      left: (_scrollRef_current_scrollLeft = (_scrollRef_current1 = scrollRef.current) === null || _scrollRef_current1 === void 0 ? void 0 : _scrollRef_current1.scrollLeft) !== null && _scrollRef_current_scrollLeft !== void 0 ? _scrollRef_current_scrollLeft : 0\n    };\n  });\n  let onFocus = e => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      var _delegate_getLastKey, _delegate_getFirstKey;\n      let navigateToKey = key => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus && !manager.isSelected(key)) manager.replaceSelection(key);\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget;\n      var _manager_lastSelectedKey, _manager_firstSelectedKey;\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate));else navigateToKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate));\n    } else if (!isVirtualized && scrollRef.current) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n    if (manager.focusedKey != null && scrollRef.current) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = (0, $feb5ffebff200149$export$c3d8340acf92597f)(ref, manager.focusedKey);\n      if (element instanceof HTMLElement) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        if (!element.contains(document.activeElement) && !shouldUseVirtualFocus) (0, $3H3GQ$focusWithoutScrolling)(element);\n        let modality = (0, $3H3GQ$getInteractionModality)();\n        if (modality === 'keyboard') (0, $3H3GQ$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n  };\n  let onBlur = e => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n  // Ref to track whether the first item in the collection should be automatically focused. Specifically used for autocomplete when user types\n  // to focus the first key AFTER the collection updates.\n  // TODO: potentially expand the usage of this\n  let shouldVirtualFocusFirst = (0, $3H3GQ$useRef)(false);\n  // Add event listeners for custom virtual events. These handle updating the focused key in response to various keyboard events\n  // at the autocomplete level\n  // TODO: fix type later\n  (0, $3H3GQ$useEvent)(ref, (0, $3H3GQ$FOCUS_EVENT), !shouldUseVirtualFocus ? undefined : e => {\n    let {\n      detail: detail\n    } = e;\n    e.stopPropagation();\n    manager.setFocused(true);\n    // If the user is typing forwards, autofocus the first option in the list.\n    if ((detail === null || detail === void 0 ? void 0 : detail.focusStrategy) === 'first') shouldVirtualFocusFirst.current = true;\n  });\n  let updateActiveDescendant = (0, $3H3GQ$useEffectEvent)(() => {\n    var _delegate_getFirstKey;\n    var _delegate_getFirstKey1;\n    let keyToFocus = (_delegate_getFirstKey1 = (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate)) !== null && _delegate_getFirstKey1 !== void 0 ? _delegate_getFirstKey1 : null;\n    // If no focusable items exist in the list, make sure to clear any activedescendant that may still exist\n    if (keyToFocus == null) {\n      (0, $3H3GQ$moveVirtualFocus)(ref.current);\n      // If there wasn't a focusable key but the collection had items, then that means we aren't in an intermediate load state and all keys are disabled.\n      // Reset shouldVirtualFocusFirst so that we don't erronously autofocus an item when the collection is filtered again.\n      if (manager.collection.size > 0) shouldVirtualFocusFirst.current = false;\n    } else {\n      manager.setFocusedKey(keyToFocus);\n      // Only set shouldVirtualFocusFirst to false if we've successfully set the first key as the focused key\n      // If there wasn't a key to focus, we might be in a temporary loading state so we'll want to still focus the first key\n      // after the collection updates after load\n      shouldVirtualFocusFirst.current = false;\n    }\n  });\n  (0, $3H3GQ$useUpdateLayoutEffect)(() => {\n    if (shouldVirtualFocusFirst.current) updateActiveDescendant();\n  }, [manager.collection, updateActiveDescendant]);\n  let resetFocusFirstFlag = (0, $3H3GQ$useEffectEvent)(() => {\n    // If user causes the focused key to change in any other way, clear shouldVirtualFocusFirst so we don't\n    // accidentally move focus from under them. Skip this if the collection was empty because we might be in a load\n    // state and will still want to focus the first item after load\n    if (manager.collection.size > 0) shouldVirtualFocusFirst.current = false;\n  });\n  (0, $3H3GQ$useUpdateLayoutEffect)(() => {\n    resetFocusFirstFlag();\n  }, [manager.focusedKey, resetFocusFirstFlag]);\n  (0, $3H3GQ$useEvent)(ref, (0, $3H3GQ$CLEAR_FOCUS_EVENT), !shouldUseVirtualFocus ? undefined : e => {\n    var _e_detail;\n    e.stopPropagation();\n    manager.setFocused(false);\n    if ((_e_detail = e.detail) === null || _e_detail === void 0 ? void 0 : _e_detail.clearFocusKey) manager.setFocusedKey(null);\n  });\n  const autoFocusRef = (0, $3H3GQ$useRef)(autoFocus);\n  const didAutoFocusRef = (0, $3H3GQ$useRef)(false);\n  (0, $3H3GQ$useEffect)(() => {\n    if (autoFocusRef.current) {\n      var _delegate_getFirstKey, _delegate_getLastKey;\n      let focusedKey = null;\n      var _delegate_getFirstKey1;\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') focusedKey = (_delegate_getFirstKey1 = (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate)) !== null && _delegate_getFirstKey1 !== void 0 ? _delegate_getFirstKey1 : null;\n      var _delegate_getLastKey1;\n      if (autoFocus === 'last') focusedKey = (_delegate_getLastKey1 = (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate)) !== null && _delegate_getLastKey1 !== void 0 ? _delegate_getLastKey1 : null;\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        for (let key of selectedKeys) if (manager.canSelectItem(key)) {\n          focusedKey = key;\n          break;\n        }\n      }\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) (0, $3H3GQ$focusSafely)(ref.current);\n      // Wait until the collection has items to autofocus.\n      if (manager.collection.size > 0) {\n        autoFocusRef.current = false;\n        didAutoFocusRef.current = true;\n      }\n    }\n  });\n  // Scroll the focused element into view when the focusedKey changes.\n  let lastFocusedKey = (0, $3H3GQ$useRef)(manager.focusedKey);\n  let raf = (0, $3H3GQ$useRef)(null);\n  (0, $3H3GQ$useEffect)(() => {\n    if (manager.isFocused && manager.focusedKey != null && (manager.focusedKey !== lastFocusedKey.current || didAutoFocusRef.current) && scrollRef.current && ref.current) {\n      let modality = (0, $3H3GQ$getInteractionModality)();\n      let element = (0, $feb5ffebff200149$export$c3d8340acf92597f)(ref, manager.focusedKey);\n      if (!(element instanceof HTMLElement))\n        // If item element wasn't found, return early (don't update autoFocusRef and lastFocusedKey).\n        // The collection may initially be empty (e.g. virtualizer), so wait until the element exists.\n        return;\n      if (modality === 'keyboard' || didAutoFocusRef.current) {\n        if (raf.current) cancelAnimationFrame(raf.current);\n        raf.current = requestAnimationFrame(() => {\n          if (scrollRef.current) (0, $3H3GQ$scrollIntoView)(scrollRef.current, element);\n        });\n        // Avoid scroll in iOS VO, since it may cause overlay to close (i.e. RAC submenu)\n        if (modality !== 'virtual') (0, $3H3GQ$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n    // If the focused key becomes null (e.g. the last item is deleted), focus the whole collection.\n    if (!shouldUseVirtualFocus && manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null && ref.current) (0, $3H3GQ$focusSafely)(ref.current);\n    lastFocusedKey.current = manager.focusedKey;\n    didAutoFocusRef.current = false;\n  });\n  (0, $3H3GQ$useEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, []);\n  // Intercept FocusScope restoration since virtualized collections can reuse DOM nodes.\n  (0, $3H3GQ$useEvent)(ref, 'react-aria-focus-scope-restore', e => {\n    e.preventDefault();\n    manager.setFocused(true);\n  });\n  let handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target)\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n    }\n  };\n  let {\n    typeSelectProps: typeSelectProps\n  } = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n  if (!disallowTypeAhead) handlers = (0, $3H3GQ$mergeProps)(typeSelectProps, handlers);\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  let tabIndex = undefined;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  let collectionId = (0, $feb5ffebff200149$export$881eb0d9f3605d9d)(manager.collection);\n  return {\n    collectionProps: (0, $3H3GQ$mergeProps)(handlers, {\n      tabIndex: tabIndex,\n      'data-collection': collectionId\n    })\n  };\n}\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection };","map":{"version":3,"names":["$ae20dd8cbca75726$export$d6daf82dcd84e87c","options","selectionManager","manager","keyboardDelegate","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","escapeKeyBehavior","selectOnFocus","selectionBehavior","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","isVirtualized","scrollRef","linkBehavior","direction","$3H3GQ$useLocale","router","$3H3GQ$useRouter","onKeyDown","e","_ref_current","altKey","key","preventDefault","current","contains","target","navigateToKey","childFocus","isLink","$feb5ffebff200149$export$d3e3bd3e26688c04","$3H3GQ$flushSync","setFocusedKey","item","$feb5ffebff200149$export$c3d8340acf92597f","itemProps","getItemProps","open","href","routerOptions","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","_delegate_getKeyBelow","_delegate_getFirstKey","_delegate_getFirstKey1","nextKey","focusedKey","call","getFirstKey","getKeyAbove","_delegate_getKeyAbove","_delegate_getLastKey","_delegate_getLastKey1","getLastKey","getKeyLeftOf","_delegate_getKeyLeftOf","_delegate_getFirstKey2","_delegate_getLastKey2","getKeyRightOf","_delegate_getKeyRightOf","_delegate_getLastKey3","_delegate_getFirstKey3","firstKey","$3H3GQ$isCtrlKeyPressed","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","selectedKeys","size","stopPropagation","clearSelection","focus","walker","$3H3GQ$getFocusableTreeWalker","tabbable","next","undefined","last","lastChild","document","activeElement","$3H3GQ$focusWithoutScrolling","scrollPos","$3H3GQ$useRef","top","left","$3H3GQ$useEvent","_scrollRef_current","_scrollRef_current1","_scrollRef_current_scrollTop","_scrollRef_current_scrollLeft","scrollTop","scrollLeft","onFocus","isFocused","currentTarget","setFocused","isSelected","relatedTarget","_manager_lastSelectedKey","_manager_firstSelectedKey","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","HTMLElement","modality","$3H3GQ$getInteractionModality","$3H3GQ$scrollIntoViewport","containingElement","onBlur","shouldVirtualFocusFirst","$3H3GQ$FOCUS_EVENT","detail","focusStrategy","updateActiveDescendant","$3H3GQ$useEffectEvent","keyToFocus","$3H3GQ$moveVirtualFocus","collection","$3H3GQ$useUpdateLayoutEffect","resetFocusFirstFlag","$3H3GQ$CLEAR_FOCUS_EVENT","_e_detail","clearFocusKey","autoFocusRef","didAutoFocusRef","$3H3GQ$useEffect","canSelectItem","$3H3GQ$focusSafely","lastFocusedKey","raf","cancelAnimationFrame","requestAnimationFrame","$3H3GQ$scrollIntoView","handlers","onMouseDown","typeSelectProps","$fb3050f43d946246$export$e32c88dfddc6e1d8","$3H3GQ$mergeProps","tabIndex","collectionId","$feb5ffebff200149$export$881eb0d9f3605d9d","collectionProps"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/grid/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CLEAR_FOCUS_EVENT, FOCUS_EVENT, focusWithoutScrolling, isCtrlKeyPressed, mergeProps, scrollIntoView, scrollIntoViewport, useEffectEvent, useEvent, useRouter, useUpdateLayoutEffect} from '@react-aria/utils';\nimport {DOMAttributes, FocusableElement, FocusStrategy, Key, KeyboardDelegate, RefObject} from '@react-types/shared';\nimport {flushSync} from 'react-dom';\nimport {FocusEvent, KeyboardEvent, useEffect, useRef} from 'react';\nimport {focusSafely, getInteractionModality} from '@react-aria/interactions';\nimport {getFocusableTreeWalker, moveVirtualFocus} from '@react-aria/focus';\nimport {getItemElement, isNonContiguousSelectionModifier, useCollectionId} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement | null>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether pressing the Escape should clear selection in the collection or not.\n   * @default 'clearSelection'\n   */\n  escapeKeyBehavior?: 'clearSelection' | 'none',\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement | null>,\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'action'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    escapeKeyBehavior = 'clearSelection',\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref,\n    linkBehavior = 'action'\n  } = options;\n  let {direction} = useLocale();\n  let router = useRouter();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current?.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        if (manager.isLink(key) && linkBehavior === 'selection' && selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          // Set focused key and re-render synchronously to bring item into view if needed.\n          flushSync(() => {\n            manager.setFocusedKey(key, childFocus);\n          });\n\n          let item = getItemElement(ref, key);\n          let itemProps = manager.getItemProps(key);\n          if (item) {\n            router.open(item, e, itemProps.href, itemProps.routerOptions);\n          }\n\n          return;\n        }\n\n        manager.setFocusedKey(key, childFocus);\n\n        if (manager.isLink(key) && linkBehavior === 'override') {\n          return;\n        }\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow?.(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove?.(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          let nextKey: Key | undefined | null = manager.focusedKey != null ? delegate.getKeyLeftOf?.(manager.focusedKey) : null;\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = direction === 'rtl' ? delegate.getFirstKey?.(manager.focusedKey) : delegate.getLastKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n          }\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          let nextKey: Key | undefined | null = manager.focusedKey != null ? delegate.getKeyRightOf?.(manager.focusedKey) : null;\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = direction === 'rtl' ? delegate.getLastKey?.(manager.focusedKey) : delegate.getFirstKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n          }\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          if (manager.focusedKey === null && e.shiftKey) {\n            return;\n          }\n          e.preventDefault();\n          let firstKey: Key | null = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (firstKey != null) {\n            if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n              manager.extendSelection(firstKey);\n            } else if (selectOnFocus) {\n              manager.replaceSelection(firstKey);\n            }\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          if (manager.focusedKey === null && e.shiftKey) {\n            return;\n          }\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (lastKey != null) {\n            if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n              manager.extendSelection(lastKey);\n            } else if (selectOnFocus) {\n              manager.replaceSelection(lastKey);\n            }\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow && manager.focusedKey != null) {\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove && manager.focusedKey != null) {\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        if (escapeKeyBehavior === 'clearSelection' && !disallowEmptySelection && manager.selectedKeys.size !== 0) {\n          e.stopPropagation();\n          e.preventDefault();\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement | undefined = undefined;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  /// TODO: should this happen all the time??\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? undefined : () => {\n    scrollPos.current = {\n      top: scrollRef.current?.scrollTop ?? 0,\n      left: scrollRef.current?.scrollLeft ?? 0\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      let navigateToKey = (key: Key | undefined | null) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus && !manager.isSelected(key)) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToKey(manager.lastSelectedKey ?? delegate.getLastKey?.());\n      } else {\n        navigateToKey(manager.firstSelectedKey ?? delegate.getFirstKey?.());\n      }\n    } else if (!isVirtualized && scrollRef.current) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n\n    if (manager.focusedKey != null && scrollRef.current) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = getItemElement(ref, manager.focusedKey);\n      if (element instanceof HTMLElement) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        if (!element.contains(document.activeElement) && !shouldUseVirtualFocus) {\n          focusWithoutScrolling(element);\n        }\n\n        let modality = getInteractionModality();\n        if (modality === 'keyboard') {\n          scrollIntoViewport(element, {containingElement: ref.current});\n        }\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  // Ref to track whether the first item in the collection should be automatically focused. Specifically used for autocomplete when user types\n  // to focus the first key AFTER the collection updates.\n  // TODO: potentially expand the usage of this\n  let shouldVirtualFocusFirst = useRef(false);\n  // Add event listeners for custom virtual events. These handle updating the focused key in response to various keyboard events\n  // at the autocomplete level\n  // TODO: fix type later\n  useEvent(ref, FOCUS_EVENT, !shouldUseVirtualFocus ? undefined : (e: any) => {\n    let {detail} = e;\n    e.stopPropagation();\n    manager.setFocused(true);\n\n    // If the user is typing forwards, autofocus the first option in the list.\n    if (detail?.focusStrategy === 'first') {\n      shouldVirtualFocusFirst.current = true;\n    }\n  });\n\n  let updateActiveDescendant = useEffectEvent(() => {\n    let keyToFocus = delegate.getFirstKey?.() ?? null;\n\n    // If no focusable items exist in the list, make sure to clear any activedescendant that may still exist\n    if (keyToFocus == null) {\n      moveVirtualFocus(ref.current);\n\n      // If there wasn't a focusable key but the collection had items, then that means we aren't in an intermediate load state and all keys are disabled.\n      // Reset shouldVirtualFocusFirst so that we don't erronously autofocus an item when the collection is filtered again.\n      if (manager.collection.size > 0) {\n        shouldVirtualFocusFirst.current = false;\n      }\n    } else {\n      manager.setFocusedKey(keyToFocus);\n      // Only set shouldVirtualFocusFirst to false if we've successfully set the first key as the focused key\n      // If there wasn't a key to focus, we might be in a temporary loading state so we'll want to still focus the first key\n      // after the collection updates after load\n      shouldVirtualFocusFirst.current = false;\n    }\n  });\n\n  useUpdateLayoutEffect(() => {\n    if (shouldVirtualFocusFirst.current) {\n      updateActiveDescendant();\n    }\n\n  }, [manager.collection, updateActiveDescendant]);\n\n  let resetFocusFirstFlag = useEffectEvent(() => {\n    // If user causes the focused key to change in any other way, clear shouldVirtualFocusFirst so we don't\n    // accidentally move focus from under them. Skip this if the collection was empty because we might be in a load\n    // state and will still want to focus the first item after load\n    if (manager.collection.size > 0) {\n      shouldVirtualFocusFirst.current = false;\n    }\n  });\n\n  useUpdateLayoutEffect(() => {\n    resetFocusFirstFlag();\n  }, [manager.focusedKey, resetFocusFirstFlag]);\n\n  useEvent(ref, CLEAR_FOCUS_EVENT, !shouldUseVirtualFocus ? undefined : (e: any) => {\n    e.stopPropagation();\n    manager.setFocused(false);\n    if (e.detail?.clearFocusKey) {\n      manager.setFocusedKey(null);\n    }\n  });\n\n  const autoFocusRef = useRef(autoFocus);\n  const didAutoFocusRef = useRef(false);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey: Key | null = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey?.() ?? null;\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey?.() ?? null;\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        for (let key of selectedKeys) {\n          if (manager.canSelectItem(key)) {\n            focusedKey = key;\n            break;\n          }\n        }\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n\n      // Wait until the collection has items to autofocus.\n      if (manager.collection.size > 0) {\n        autoFocusRef.current = false;\n        didAutoFocusRef.current = true;\n      }\n    }\n  });\n\n  // Scroll the focused element into view when the focusedKey changes.\n  let lastFocusedKey = useRef(manager.focusedKey);\n  let raf = useRef<number | null>(null);\n  useEffect(() => {\n    if (manager.isFocused && manager.focusedKey != null && (manager.focusedKey !== lastFocusedKey.current || didAutoFocusRef.current) && scrollRef.current && ref.current) {\n      let modality = getInteractionModality();\n      let element = getItemElement(ref, manager.focusedKey);\n      if (!(element instanceof HTMLElement)) {\n        // If item element wasn't found, return early (don't update autoFocusRef and lastFocusedKey).\n        // The collection may initially be empty (e.g. virtualizer), so wait until the element exists.\n        return;\n      }\n\n      if (modality === 'keyboard' || didAutoFocusRef.current) {\n\n        if (raf.current) {\n          cancelAnimationFrame(raf.current);\n        }\n\n        raf.current = requestAnimationFrame(() => {\n          if (scrollRef.current) {\n            scrollIntoView(scrollRef.current, element);\n          }\n        });\n        // Avoid scroll in iOS VO, since it may cause overlay to close (i.e. RAC submenu)\n        if (modality !== 'virtual') {\n          scrollIntoViewport(element, {containingElement: ref.current});\n        }\n      }\n    }\n\n    // If the focused key becomes null (e.g. the last item is deleted), focus the whole collection.\n    if (!shouldUseVirtualFocus && manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null && ref.current) {\n      focusSafely(ref.current);\n    }\n\n    lastFocusedKey.current = manager.focusedKey;\n    didAutoFocusRef.current = false;\n  });\n\n  useEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, []);\n\n  // Intercept FocusScope restoration since virtualized collections can reuse DOM nodes.\n  useEvent(ref, 'react-aria-focus-scope-restore', e => {\n    e.preventDefault();\n    manager.setFocused(true);\n  });\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  let tabIndex: number | undefined = undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  let collectionId = useCollectionId(manager.collection);\n  return {\n    collectionProps: mergeProps(handlers, {\n      tabIndex,\n      'data-collection': collectionId\n    })\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}