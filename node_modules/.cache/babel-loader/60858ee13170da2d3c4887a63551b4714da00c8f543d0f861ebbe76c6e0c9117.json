{"ast":null,"code":"import { useEffect as $jNP0e$useEffect } from \"react\";\nimport { mergeProps as $jNP0e$mergeProps } from \"@react-aria/utils\";\nimport { useFormValidationState as $jNP0e$useFormValidationState, privateValidationStateProp as $jNP0e$privateValidationStateProp } from \"@react-stately/form\";\nimport { useFormValidation as $jNP0e$useFormValidation } from \"@react-aria/form\";\nimport { usePress as $jNP0e$usePress } from \"@react-aria/interactions\";\nimport { useToggle as $jNP0e$useToggle } from \"@react-aria/toggle\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {\n  // Create validation state here because it doesn't make sense to add to general useToggleState.\n  let validationState = (0, $jNP0e$useFormValidationState)({\n    ...props,\n    value: state.isSelected\n  });\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = validationState.displayValidation;\n  let {\n    labelProps: labelProps,\n    inputProps: inputProps,\n    isSelected: isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly\n  } = (0, $jNP0e$useToggle)({\n    ...props,\n    isInvalid: isInvalid\n  }, state, inputRef);\n  (0, $jNP0e$useFormValidation)(props, validationState, inputRef);\n  let {\n    isIndeterminate: isIndeterminate,\n    isRequired: isRequired,\n    validationBehavior = 'aria'\n  } = props;\n  (0, $jNP0e$useEffect)(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) inputRef.current.indeterminate = !!isIndeterminate;\n  });\n  // Reset validation state on label press for checkbox with a hidden input.\n  let {\n    pressProps: pressProps\n  } = (0, $jNP0e$usePress)({\n    isDisabled: isDisabled || isReadOnly,\n    onPress() {\n      // @ts-expect-error\n      let {\n        [(0, $jNP0e$privateValidationStateProp)]: groupValidationState\n      } = props;\n      let {\n        commitValidation: commitValidation\n      } = groupValidationState ? groupValidationState : validationState;\n      commitValidation();\n    }\n  });\n  return {\n    labelProps: (0, $jNP0e$mergeProps)(labelProps, pressProps),\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-required': isRequired && validationBehavior === 'aria' || undefined,\n      required: isRequired && validationBehavior === 'native'\n    },\n    isSelected: isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox };","map":{"version":3,"names":["$406796ff087fe49b$export$e375f10ce42261c5","props","state","inputRef","validationState","$jNP0e$useFormValidationState","value","isSelected","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","inputProps","isPressed","isDisabled","isReadOnly","$jNP0e$useToggle","$jNP0e$useFormValidation","isIndeterminate","isRequired","validationBehavior","$jNP0e$useEffect","current","indeterminate","pressProps","$jNP0e$usePress","onPress","$jNP0e$privateValidationStateProp","groupValidationState","commitValidation","$jNP0e$mergeProps","checked","undefined","required"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckbox.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, LabelHTMLAttributes, useEffect} from 'react';\nimport {mergeProps} from '@react-aria/utils';\nimport {privateValidationStateProp, useFormValidationState} from '@react-stately/form';\nimport {RefObject, ValidationResult} from '@react-types/shared';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFormValidation} from '@react-aria/form';\nimport {usePress} from '@react-aria/interactions';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria extends ValidationResult {\n  /** Props for the label wrapper element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the checkbox is selected. */\n  isSelected: boolean,\n  /** Whether the checkbox is in a pressed state. */\n  isPressed: boolean,\n  /** Whether the checkbox is disabled. */\n  isDisabled: boolean,\n  /** Whether the checkbox is read only. */\n  isReadOnly: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement | null>): CheckboxAria {\n  // Create validation state here because it doesn't make sense to add to general useToggleState.\n  let validationState = useFormValidationState({...props, value: state.isSelected});\n  let {isInvalid, validationErrors, validationDetails} = validationState.displayValidation;\n  let {labelProps, inputProps, isSelected, isPressed, isDisabled, isReadOnly} = useToggle({\n    ...props,\n    isInvalid\n  }, state, inputRef);\n\n  useFormValidation(props, validationState, inputRef);\n\n  let {isIndeterminate, isRequired, validationBehavior = 'aria'} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = !!isIndeterminate;\n    }\n  });\n\n  // Reset validation state on label press for checkbox with a hidden input.\n  let {pressProps} = usePress({\n    isDisabled: isDisabled || isReadOnly,\n    onPress() {\n      // @ts-expect-error\n      let {[privateValidationStateProp]: groupValidationState} = props;\n  \n      let {commitValidation} = groupValidationState\n      ? groupValidationState\n      : validationState;\n      \n      commitValidation();\n    }\n  });\n\n  return {\n    labelProps: mergeProps(labelProps, pressProps),\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-required': (isRequired && validationBehavior === 'aria') || undefined,\n      required: isRequired && validationBehavior === 'native'\n    },\n    isSelected,\n    isPressed,\n    isDisabled,\n    isReadOnly,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;AA6CO,SAASA,0CAAYC,KAAwB,EAAEC,KAAkB,EAAEC,QAA4C;EACpH;EACA,IAAIC,eAAA,GAAkB,IAAAC,6BAAqB,EAAE;IAAC,GAAGJ,KAAK;IAAEK,KAAA,EAAOJ,KAAA,CAAMK;EAAU;EAC/E,IAAI;IAAAC,SAAA,EAACA,SAAS;IAAAC,gBAAA,EAAEA,gBAAgB;IAAAC,iBAAA,EAAEA;EAAiB,CAAC,GAAGN,eAAA,CAAgBO,iBAAiB;EACxF,IAAI;IAAAC,UAAA,EAACA,UAAU;IAAAC,UAAA,EAAEA,UAAU;IAAAN,UAAA,EAAEA,UAAU;IAAAO,SAAA,EAAEA,SAAS;IAAAC,UAAA,EAAEA,UAAU;IAAAC,UAAA,EAAEA;EAAU,CAAC,GAAG,IAAAC,gBAAQ,EAAE;IACtF,GAAGhB,KAAK;eACRO;EACF,GAAGN,KAAA,EAAOC,QAAA;EAEV,IAAAe,wBAAgB,EAAEjB,KAAA,EAAOG,eAAA,EAAiBD,QAAA;EAE1C,IAAI;IAAAgB,eAAA,EAACA,eAAe;IAAAC,UAAA,EAAEA,UAAU;IAAEC,kBAAA,GAAqB;EAAA,CAAO,GAAGpB,KAAA;EACjE,IAAAqB,gBAAQ,EAAE;IACR;IACA;IACA,IAAInB,QAAA,CAASoB,OAAO,EAClBpB,QAAA,CAASoB,OAAO,CAACC,aAAa,GAAG,CAAC,CAACL,eAAA;EAEvC;EAEA;EACA,IAAI;IAAAM,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,eAAO,EAAE;IAC1BX,UAAA,EAAYA,UAAA,IAAcC,UAAA;IAC1BW,QAAA;MACE;MACA,IAAI;QAAC,EAAC,GAAAC,iCAAyB,IAAIC;MAAoB,CAAC,GAAG5B,KAAA;MAE3D,IAAI;QAAA6B,gBAAA,EAACA;MAAgB,CAAC,GAAGD,oBAAA,GACvBA,oBAAA,GACAzB,eAAA;MAEF0B,gBAAA;IACF;EACF;EAEA,OAAO;IACLlB,UAAA,EAAY,IAAAmB,iBAAS,EAAEnB,UAAA,EAAYa,UAAA;IACnCZ,UAAA,EAAY;MACV,GAAGA,UAAU;MACbmB,OAAA,EAASzB,UAAA;MACT,iBAAiBa,UAAC,IAAcC,kBAAA,KAAuB,UAAWY,SAAA;MAClEC,QAAA,EAAUd,UAAA,IAAcC,kBAAA,KAAuB;IACjD;gBACAd,UAAA;eACAO,SAAA;gBACAC,UAAA;gBACAC,UAAA;eACAR,SAAA;sBACAC,gBAAA;uBACAC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}