{"ast":null,"code":"import { useSafelyMouseToSubmenu as $d275435c250248f8$export$85ec83e04c95f50a } from \"./useSafelyMouseToSubmenu.mjs\";\nimport { useId as $dXlYe$useId, useEffectEvent as $dXlYe$useEffectEvent, useLayoutEffect as $dXlYe$useLayoutEffect, focusWithoutScrolling as $dXlYe$focusWithoutScrolling } from \"@react-aria/utils\";\nimport { useRef as $dXlYe$useRef, useCallback as $dXlYe$useCallback } from \"react\";\nimport { useLocale as $dXlYe$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $0065b146e7192841$export$7138b0d059a6e743(props, state, ref) {\n  let {\n    parentMenuRef: parentMenuRef,\n    submenuRef: submenuRef,\n    type = 'menu',\n    isDisabled: isDisabled,\n    delay = 200,\n    shouldUseVirtualFocus: shouldUseVirtualFocus\n  } = props;\n  let submenuTriggerId = (0, $dXlYe$useId)();\n  let overlayId = (0, $dXlYe$useId)();\n  let {\n    direction: direction\n  } = (0, $dXlYe$useLocale)();\n  let openTimeout = (0, $dXlYe$useRef)(undefined);\n  let cancelOpenTimeout = (0, $dXlYe$useCallback)(() => {\n    if (openTimeout.current) {\n      clearTimeout(openTimeout.current);\n      openTimeout.current = undefined;\n    }\n  }, [openTimeout]);\n  let onSubmenuOpen = (0, $dXlYe$useEffectEvent)(focusStrategy => {\n    cancelOpenTimeout();\n    state.open(focusStrategy);\n  });\n  let onSubmenuClose = (0, $dXlYe$useEffectEvent)(() => {\n    cancelOpenTimeout();\n    state.close();\n  });\n  (0, $dXlYe$useLayoutEffect)(() => {\n    return () => {\n      cancelOpenTimeout();\n    };\n  }, [cancelOpenTimeout]);\n  let submenuKeyDown = e => {\n    // If focus is not within the menu, assume virtual focus is being used.\n    // This means some other input element is also within the popover, so we shouldn't close the menu.\n    if (!e.currentTarget.contains(document.activeElement)) return;\n    switch (e.key) {\n      case 'ArrowLeft':\n        if (direction === 'ltr' && e.currentTarget.contains(e.target)) {\n          e.preventDefault();\n          e.stopPropagation();\n          onSubmenuClose();\n          if (!shouldUseVirtualFocus && ref.current) (0, $dXlYe$focusWithoutScrolling)(ref.current);\n        }\n        break;\n      case 'ArrowRight':\n        if (direction === 'rtl' && e.currentTarget.contains(e.target)) {\n          e.preventDefault();\n          e.stopPropagation();\n          onSubmenuClose();\n          if (!shouldUseVirtualFocus && ref.current) (0, $dXlYe$focusWithoutScrolling)(ref.current);\n        }\n        break;\n      case 'Escape':\n        var _submenuRef_current;\n        // TODO: can remove this when we fix collection event leaks\n        if ((_submenuRef_current = submenuRef.current) === null || _submenuRef_current === void 0 ? void 0 : _submenuRef_current.contains(e.target)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          if (!shouldUseVirtualFocus && ref.current) (0, $dXlYe$focusWithoutScrolling)(ref.current);\n        }\n        break;\n    }\n  };\n  var _state_focusStrategy;\n  let submenuProps = {\n    id: overlayId,\n    'aria-labelledby': submenuTriggerId,\n    submenuLevel: state.submenuLevel,\n    ...(type === 'menu' && {\n      onClose: state.closeAll,\n      autoFocus: (_state_focusStrategy = state.focusStrategy) !== null && _state_focusStrategy !== void 0 ? _state_focusStrategy : undefined,\n      onKeyDown: submenuKeyDown\n    })\n  };\n  let submenuTriggerKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowRight':\n        if (!isDisabled) {\n          if (direction === 'ltr') {\n            e.preventDefault();\n            if (!state.isOpen) onSubmenuOpen('first');\n            if (type === 'menu' && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current)) (0, $dXlYe$focusWithoutScrolling)(submenuRef.current);\n          } else if (state.isOpen) onSubmenuClose();else e.continuePropagation();\n        }\n        break;\n      case 'ArrowLeft':\n        if (!isDisabled) {\n          if (direction === 'rtl') {\n            e.preventDefault();\n            if (!state.isOpen) onSubmenuOpen('first');\n            if (type === 'menu' && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current)) (0, $dXlYe$focusWithoutScrolling)(submenuRef.current);\n          } else if (state.isOpen) onSubmenuClose();else e.continuePropagation();\n        }\n        break;\n      default:\n        e.continuePropagation();\n        break;\n    }\n  };\n  let onPressStart = e => {\n    if (!isDisabled && (e.pointerType === 'virtual' || e.pointerType === 'keyboard'))\n      // If opened with a screen reader or keyboard, auto focus the first submenu item.\n      onSubmenuOpen('first');\n  };\n  let onPress = e => {\n    if (!isDisabled && (e.pointerType === 'touch' || e.pointerType === 'mouse'))\n      // For touch or on a desktop device with a small screen open on press up to possible problems with\n      // press up happening on the newly opened tray items\n      onSubmenuOpen();\n  };\n  let onHoverChange = isHovered => {\n    if (!isDisabled) {\n      if (isHovered && !state.isOpen) {\n        if (!openTimeout.current) openTimeout.current = setTimeout(() => {\n          onSubmenuOpen();\n        }, delay);\n      } else if (!isHovered) cancelOpenTimeout();\n    }\n  };\n  let onBlur = e => {\n    var _parentMenuRef_current;\n    if (state.isOpen && ((_parentMenuRef_current = parentMenuRef.current) === null || _parentMenuRef_current === void 0 ? void 0 : _parentMenuRef_current.contains(e.relatedTarget))) onSubmenuClose();\n  };\n  let shouldCloseOnInteractOutside = target => {\n    if (target !== ref.current) return true;\n    return false;\n  };\n  (0, $d275435c250248f8$export$85ec83e04c95f50a)({\n    menuRef: parentMenuRef,\n    submenuRef: submenuRef,\n    isOpen: state.isOpen,\n    isDisabled: isDisabled\n  });\n  return {\n    submenuTriggerProps: {\n      id: submenuTriggerId,\n      'aria-controls': state.isOpen ? overlayId : undefined,\n      'aria-haspopup': !isDisabled ? type : undefined,\n      'aria-expanded': state.isOpen ? 'true' : 'false',\n      onPressStart: onPressStart,\n      onPress: onPress,\n      onHoverChange: onHoverChange,\n      onKeyDown: submenuTriggerKeyDown,\n      onBlur: onBlur,\n      isOpen: state.isOpen\n    },\n    submenuProps: submenuProps,\n    popoverProps: {\n      isNonModal: true,\n      shouldCloseOnInteractOutside: shouldCloseOnInteractOutside\n    }\n  };\n}\nexport { $0065b146e7192841$export$7138b0d059a6e743 as useSubmenuTrigger };","map":{"version":3,"names":["$0065b146e7192841$export$7138b0d059a6e743","props","state","ref","parentMenuRef","submenuRef","type","isDisabled","delay","shouldUseVirtualFocus","submenuTriggerId","$dXlYe$useId","overlayId","direction","$dXlYe$useLocale","openTimeout","$dXlYe$useRef","undefined","cancelOpenTimeout","$dXlYe$useCallback","current","clearTimeout","onSubmenuOpen","$dXlYe$useEffectEvent","focusStrategy","open","onSubmenuClose","close","$dXlYe$useLayoutEffect","submenuKeyDown","e","currentTarget","contains","document","activeElement","key","target","preventDefault","stopPropagation","$dXlYe$focusWithoutScrolling","_submenuRef_current","_state_focusStrategy","submenuProps","id","submenuLevel","onClose","closeAll","autoFocus","onKeyDown","submenuTriggerKeyDown","isOpen","continuePropagation","onPressStart","pointerType","onPress","onHoverChange","isHovered","setTimeout","onBlur","_parentMenuRef_current","relatedTarget","shouldCloseOnInteractOutside","$d275435c250248f8$export$85ec83e04c95f50a","menuRef","submenuTriggerProps","popoverProps","isNonModal"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/src/useSubmenuTrigger.ts"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuItemProps} from './useMenuItem';\nimport {AriaMenuOptions} from './useMenu';\nimport type {AriaPopoverProps, OverlayProps} from '@react-aria/overlays';\nimport {FocusableElement, FocusStrategy, KeyboardEvent, Node, PressEvent, RefObject} from '@react-types/shared';\nimport {focusWithoutScrolling, useEffectEvent, useId, useLayoutEffect} from '@react-aria/utils';\nimport type {SubmenuTriggerState} from '@react-stately/menu';\nimport {useCallback, useRef} from 'react';\nimport {useLocale} from '@react-aria/i18n';\nimport {useSafelyMouseToSubmenu} from './useSafelyMouseToSubmenu';\n\nexport interface AriaSubmenuTriggerProps {\n  /**\n   * An object representing the submenu trigger menu item. Contains all the relevant information that makes up the menu item.\n   * @deprecated\n   */\n  node?: Node<unknown>,\n  /** Whether the submenu trigger is disabled. */\n  isDisabled?: boolean,\n  /** The type of the contents that the submenu trigger opens. */\n  type?: 'dialog' | 'menu',\n  /** Ref of the menu that contains the submenu trigger. */\n  parentMenuRef: RefObject<HTMLElement | null>,\n  /** Ref of the submenu opened by the submenu trigger. */\n  submenuRef: RefObject<HTMLElement | null>,\n  /**\n   * The delay time in milliseconds for the submenu to appear after hovering over the trigger.\n   * @default 200\n   */\n  delay?: number,\n  /** Whether the submenu trigger uses virtual focus. */\n  shouldUseVirtualFocus?: boolean\n}\n\ninterface SubmenuTriggerProps extends Omit<AriaMenuItemProps, 'key'> {\n  /** Whether the submenu trigger is in an expanded state. */\n  isOpen: boolean\n}\n\ninterface SubmenuProps<T> extends AriaMenuOptions<T> {\n  /** The level of the submenu. */\n  submenuLevel: number\n}\n\nexport interface SubmenuTriggerAria<T> {\n  /** Props for the submenu trigger menu item. */\n  submenuTriggerProps: SubmenuTriggerProps,\n  /** Props for the submenu controlled by the submenu trigger menu item. */\n  submenuProps: SubmenuProps<T>,\n  /** Props for the submenu's popover container. */\n  popoverProps: Pick<AriaPopoverProps, 'isNonModal' | 'shouldCloseOnInteractOutside'> & Pick<OverlayProps, 'disableFocusManagement'>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a submenu trigger and its associated submenu.\n * @param props - Props for the submenu trigger and refs attach to its submenu and parent menu.\n * @param state - State for the submenu trigger.\n * @param ref - Ref to the submenu trigger element.\n */\nexport function useSubmenuTrigger<T>(props: AriaSubmenuTriggerProps, state: SubmenuTriggerState, ref: RefObject<FocusableElement | null>): SubmenuTriggerAria<T> {\n  let {parentMenuRef, submenuRef, type = 'menu', isDisabled, delay = 200, shouldUseVirtualFocus} = props;\n  let submenuTriggerId = useId();\n  let overlayId = useId();\n  let {direction} = useLocale();\n  let openTimeout = useRef<ReturnType<typeof setTimeout> | undefined>(undefined);\n  let cancelOpenTimeout = useCallback(() => {\n    if (openTimeout.current) {\n      clearTimeout(openTimeout.current);\n      openTimeout.current = undefined;\n    }\n  }, [openTimeout]);\n\n  let onSubmenuOpen = useEffectEvent((focusStrategy?: FocusStrategy) => {\n    cancelOpenTimeout();\n    state.open(focusStrategy);\n  });\n\n  let onSubmenuClose = useEffectEvent(() => {\n    cancelOpenTimeout();\n    state.close();\n  });\n\n  useLayoutEffect(() => {\n    return () => {\n      cancelOpenTimeout();\n    };\n  }, [cancelOpenTimeout]);\n\n  let submenuKeyDown = (e: KeyboardEvent) => {\n    // If focus is not within the menu, assume virtual focus is being used.\n    // This means some other input element is also within the popover, so we shouldn't close the menu.\n    if (!e.currentTarget.contains(document.activeElement)) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        if (direction === 'ltr' && e.currentTarget.contains(e.target as Element)) {\n          e.preventDefault();\n          e.stopPropagation();\n          onSubmenuClose();\n          if (!shouldUseVirtualFocus && ref.current) {\n            focusWithoutScrolling(ref.current);\n          }\n        }\n        break;\n      case 'ArrowRight':\n        if (direction === 'rtl' && e.currentTarget.contains(e.target as Element)) {\n          e.preventDefault();\n          e.stopPropagation();\n          onSubmenuClose();\n          if (!shouldUseVirtualFocus && ref.current) {\n            focusWithoutScrolling(ref.current);\n          }\n        }\n        break;\n      case 'Escape':\n        // TODO: can remove this when we fix collection event leaks\n        if (submenuRef.current?.contains(e.target as Element)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          if (!shouldUseVirtualFocus && ref.current) {\n            focusWithoutScrolling(ref.current);\n          }\n        }\n        break;\n    }\n  };\n\n  let submenuProps = {\n    id: overlayId,\n    'aria-labelledby': submenuTriggerId,\n    submenuLevel: state.submenuLevel,\n    ...(type === 'menu' && {\n      onClose: state.closeAll,\n      autoFocus: state.focusStrategy ?? undefined,\n      onKeyDown: submenuKeyDown\n    })\n  };\n\n  let submenuTriggerKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowRight':\n        if (!isDisabled) {\n          if (direction === 'ltr') {\n            e.preventDefault();\n            if (!state.isOpen) {\n              onSubmenuOpen('first');\n            }\n\n            if (type === 'menu' && !!submenuRef?.current && document.activeElement === ref?.current) {\n              focusWithoutScrolling(submenuRef.current);\n            }\n          } else if (state.isOpen) {\n            onSubmenuClose();\n          } else {\n            e.continuePropagation();\n          }\n        }\n\n        break;\n      case 'ArrowLeft':\n        if (!isDisabled) {\n          if (direction === 'rtl') {\n            e.preventDefault();\n            if (!state.isOpen) {\n              onSubmenuOpen('first');\n            }\n\n            if (type === 'menu' && !!submenuRef?.current && document.activeElement === ref?.current) {\n              focusWithoutScrolling(submenuRef.current);\n            }\n          } else if (state.isOpen) {\n            onSubmenuClose();\n          } else {\n            e.continuePropagation();\n          }\n        }\n        break;\n      default:\n        e.continuePropagation();\n        break;\n    }\n  };\n\n  let onPressStart = (e: PressEvent) => {\n    if (!isDisabled && (e.pointerType === 'virtual' || e.pointerType === 'keyboard')) {\n      // If opened with a screen reader or keyboard, auto focus the first submenu item.\n      onSubmenuOpen('first');\n    }\n  };\n\n  let onPress = (e: PressEvent) => {\n    if (!isDisabled && (e.pointerType === 'touch' || e.pointerType === 'mouse')) {\n      // For touch or on a desktop device with a small screen open on press up to possible problems with\n      // press up happening on the newly opened tray items\n      onSubmenuOpen();\n    }\n  };\n\n  let onHoverChange = (isHovered) => {\n    if (!isDisabled) {\n      if (isHovered && !state.isOpen) {\n        if (!openTimeout.current) {\n          openTimeout.current = setTimeout(() => {\n            onSubmenuOpen();\n          }, delay);\n        }\n      } else if (!isHovered) {\n        cancelOpenTimeout();\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    if (state.isOpen && (parentMenuRef.current?.contains(e.relatedTarget))) {\n      onSubmenuClose();\n    }\n  };\n\n  let shouldCloseOnInteractOutside = (target) => {\n    if (target !== ref.current) {\n      return true;\n    }\n\n    return false;\n  };\n\n  useSafelyMouseToSubmenu({menuRef: parentMenuRef, submenuRef, isOpen: state.isOpen, isDisabled: isDisabled});\n\n  return {\n    submenuTriggerProps: {\n      id: submenuTriggerId,\n      'aria-controls': state.isOpen ? overlayId : undefined,\n      'aria-haspopup': !isDisabled ? type : undefined,\n      'aria-expanded': state.isOpen ? 'true' : 'false',\n      onPressStart,\n      onPress,\n      onHoverChange,\n      onKeyDown: submenuTriggerKeyDown,\n      onBlur,\n      isOpen: state.isOpen\n    },\n    submenuProps,\n    popoverProps: {\n      isNonModal: true,\n      shouldCloseOnInteractOutside\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}