{"ast":null,"code":"import { getColumnHeaderId as $2140fb2337097f2d$export$37cd4213f2ad742e } from \"./utils.mjs\";\nimport $cjB6b$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { isAndroid as $cjB6b$isAndroid, useDescription as $cjB6b$useDescription, mergeProps as $cjB6b$mergeProps } from \"@react-aria/utils\";\nimport { useEffect as $cjB6b$useEffect } from \"react\";\nimport { usePress as $cjB6b$usePress, useFocusable as $cjB6b$useFocusable } from \"@react-aria/interactions\";\nimport { useGridCell as $cjB6b$useGridCell } from \"@react-aria/grid\";\nimport { useLocalizedStringFormatter as $cjB6b$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $f329116d8ad0aba0$export$9514819a8c81e960(props, state, ref) {\n  var _state_sortDescriptor, _state_sortDescriptor1;\n  let {\n    node: node\n  } = props;\n  let allowsSorting = node.props.allowsSorting;\n  // if there are no focusable children, the column header will focus the cell\n  let {\n    gridCellProps: gridCellProps\n  } = (0, $cjB6b$useGridCell)({\n    ...props,\n    focusMode: 'child'\n  }, state, ref);\n  let isSelectionCellDisabled = node.props.isSelectionCell && state.selectionManager.selectionMode === 'single';\n  let {\n    pressProps: pressProps\n  } = (0, $cjB6b$usePress)({\n    isDisabled: !allowsSorting || isSelectionCellDisabled,\n    onPress() {\n      state.sort(node.key);\n    },\n    ref: ref\n  });\n  // Needed to pick up the focusable context, enabling things like Tooltips for example\n  let {\n    focusableProps: focusableProps\n  } = (0, $cjB6b$useFocusable)({}, ref);\n  let ariaSort = undefined;\n  let isSortedColumn = ((_state_sortDescriptor = state.sortDescriptor) === null || _state_sortDescriptor === void 0 ? void 0 : _state_sortDescriptor.column) === node.key;\n  let sortDirection = (_state_sortDescriptor1 = state.sortDescriptor) === null || _state_sortDescriptor1 === void 0 ? void 0 : _state_sortDescriptor1.direction;\n  // aria-sort not supported in Android Talkback\n  if (node.props.allowsSorting && !(0, $cjB6b$isAndroid)()) ariaSort = isSortedColumn ? sortDirection : 'none';\n  let stringFormatter = (0, $cjB6b$useLocalizedStringFormatter)((0, $parcel$interopDefault($cjB6b$intlStringsmodulejs)), '@react-aria/table');\n  let sortDescription;\n  if (allowsSorting) {\n    sortDescription = `${stringFormatter.format('sortable')}`;\n    // Android Talkback doesn't support aria-sort so we add sort order details to the aria-described by here\n    if (isSortedColumn && sortDirection && (0, $cjB6b$isAndroid)()) sortDescription = `${sortDescription}, ${stringFormatter.format(sortDirection)}`;\n  }\n  let descriptionProps = (0, $cjB6b$useDescription)(sortDescription);\n  let shouldDisableFocus = state.collection.size === 0;\n  (0, $cjB6b$useEffect)(() => {\n    if (shouldDisableFocus && state.selectionManager.focusedKey === node.key) state.selectionManager.setFocusedKey(null);\n  }, [shouldDisableFocus, state.selectionManager, node.key]);\n  return {\n    columnHeaderProps: {\n      ...(0, $cjB6b$mergeProps)(focusableProps, gridCellProps, pressProps, descriptionProps,\n      // If the table is empty, make all column headers untabbable\n      shouldDisableFocus ? {\n        tabIndex: -1\n      } : null),\n      role: 'columnheader',\n      id: (0, $2140fb2337097f2d$export$37cd4213f2ad742e)(state, node.key),\n      'aria-colspan': node.colSpan && node.colSpan > 1 ? node.colSpan : undefined,\n      'aria-sort': ariaSort\n    }\n  };\n}\nexport { $f329116d8ad0aba0$export$9514819a8c81e960 as useTableColumnHeader };","map":{"version":3,"names":["$f329116d8ad0aba0$export$9514819a8c81e960","props","state","ref","_state_sortDescriptor","_state_sortDescriptor1","node","allowsSorting","gridCellProps","$cjB6b$useGridCell","focusMode","isSelectionCellDisabled","isSelectionCell","selectionManager","selectionMode","pressProps","$cjB6b$usePress","isDisabled","onPress","sort","key","focusableProps","$cjB6b$useFocusable","ariaSort","undefined","isSortedColumn","sortDescriptor","column","sortDirection","direction","$cjB6b$isAndroid","stringFormatter","$cjB6b$useLocalizedStringFormatter","$parcel$interopDefault","$cjB6b$intlStringsmodulejs","sortDescription","format","descriptionProps","$cjB6b$useDescription","shouldDisableFocus","collection","size","$cjB6b$useEffect","focusedKey","setFocusedKey","columnHeaderProps","$cjB6b$mergeProps","tabIndex","role","id","$2140fb2337097f2d$export$37cd4213f2ad742e","colSpan"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/table/dist/packages/@react-aria/table/src/useTableColumnHeader.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, RefObject} from '@react-types/shared';\nimport {getColumnHeaderId} from './utils';\nimport {GridNode} from '@react-types/grid';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {isAndroid, mergeProps, useDescription} from '@react-aria/utils';\nimport {TableState} from '@react-stately/table';\nimport {useEffect} from 'react';\nimport {useFocusable, usePress} from '@react-aria/interactions';\nimport {useGridCell} from '@react-aria/grid';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface AriaTableColumnHeaderProps<T> {\n  /** An object representing the [column header](https://www.w3.org/TR/wai-aria-1.1/#columnheader). Contains all the relevant information that makes up the column header. */\n  node: GridNode<T>,\n  /** Whether the [column header](https://www.w3.org/TR/wai-aria-1.1/#columnheader) is contained in a virtual scroller. */\n  isVirtualized?: boolean\n}\n\nexport interface TableColumnHeaderAria {\n  /** Props for the [column header](https://www.w3.org/TR/wai-aria-1.1/#columnheader) element. */\n  columnHeaderProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a column header in a table.\n * @param props - Props for the column header.\n * @param state - State of the table, as returned by `useTableState`.\n * @param ref - The ref attached to the column header element.\n */\nexport function useTableColumnHeader<T>(props: AriaTableColumnHeaderProps<T>, state: TableState<T>, ref: RefObject<FocusableElement | null>): TableColumnHeaderAria {\n  let {node} = props;\n  let allowsSorting = node.props.allowsSorting;\n  // if there are no focusable children, the column header will focus the cell\n  let {gridCellProps} = useGridCell({...props, focusMode: 'child'}, state, ref);\n\n  let isSelectionCellDisabled = node.props.isSelectionCell && state.selectionManager.selectionMode === 'single';\n\n  let {pressProps} = usePress({\n    isDisabled: !allowsSorting || isSelectionCellDisabled,\n    onPress() {\n      state.sort(node.key);\n    },\n    ref\n  });\n\n  // Needed to pick up the focusable context, enabling things like Tooltips for example\n  let {focusableProps} = useFocusable({}, ref);\n\n  let ariaSort: DOMAttributes['aria-sort'] | undefined = undefined;\n  let isSortedColumn = state.sortDescriptor?.column === node.key;\n  let sortDirection = state.sortDescriptor?.direction;\n  // aria-sort not supported in Android Talkback\n  if (node.props.allowsSorting && !isAndroid()) {\n    ariaSort = isSortedColumn ? sortDirection : 'none';\n  }\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/table');\n  let sortDescription;\n  if (allowsSorting) {\n    sortDescription = `${stringFormatter.format('sortable')}`;\n    // Android Talkback doesn't support aria-sort so we add sort order details to the aria-described by here\n    if (isSortedColumn && sortDirection && isAndroid()) {\n      sortDescription = `${sortDescription}, ${stringFormatter.format(sortDirection)}`;\n    }\n  }\n\n  let descriptionProps = useDescription(sortDescription);\n\n  let shouldDisableFocus = state.collection.size === 0;\n  useEffect(() => {\n    if (shouldDisableFocus && state.selectionManager.focusedKey === node.key) {\n      state.selectionManager.setFocusedKey(null);\n    }\n  }, [shouldDisableFocus, state.selectionManager, node.key]);\n\n  return {\n    columnHeaderProps: {\n      ...mergeProps(\n        focusableProps,\n        gridCellProps,\n        pressProps,\n        descriptionProps,\n        // If the table is empty, make all column headers untabbable\n        shouldDisableFocus ? {tabIndex: -1} : null\n      ),\n      role: 'columnheader',\n      id: getColumnHeaderId(state, node.key),\n      'aria-colspan': node.colSpan && node.colSpan > 1 ? node.colSpan : undefined,\n      'aria-sort': ariaSort\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}