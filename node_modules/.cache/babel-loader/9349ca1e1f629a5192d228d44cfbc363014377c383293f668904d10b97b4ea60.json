{"ast":null,"code":"import { getItemId as $b1f0cad8af73213b$export$9145995848b05025, listData as $b1f0cad8af73213b$export$3585ede4d035bf14 } from \"./utils.mjs\";\nimport { useSlotId as $fcwmx$useSlotId, isMac as $fcwmx$isMac, isWebKit as $fcwmx$isWebKit, chain as $fcwmx$chain, filterDOMProps as $fcwmx$filterDOMProps, useLinkProps as $fcwmx$useLinkProps, mergeProps as $fcwmx$mergeProps } from \"@react-aria/utils\";\nimport { getItemCount as $fcwmx$getItemCount } from \"@react-stately/collections\";\nimport { useHover as $fcwmx$useHover, isFocusVisible as $fcwmx$isFocusVisible } from \"@react-aria/interactions\";\nimport { useSelectableItem as $fcwmx$useSelectableItem } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $293f70390ea03370$export$497855f14858aa34(props, state, ref) {\n  var _item_props, _item_props1;\n  let {\n    key: key\n  } = props;\n  let data = (0, $b1f0cad8af73213b$export$3585ede4d035bf14).get(state);\n  var _props_isDisabled;\n  let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.selectionManager.isDisabled(key);\n  var _props_isSelected;\n  let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);\n  var _props_shouldSelectOnPressUp;\n  let shouldSelectOnPressUp = (_props_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _props_shouldSelectOnPressUp !== void 0 ? _props_shouldSelectOnPressUp : data === null || data === void 0 ? void 0 : data.shouldSelectOnPressUp;\n  var _props_shouldFocusOnHover;\n  let shouldFocusOnHover = (_props_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _props_shouldFocusOnHover !== void 0 ? _props_shouldFocusOnHover : data === null || data === void 0 ? void 0 : data.shouldFocusOnHover;\n  var _props_shouldUseVirtualFocus;\n  let shouldUseVirtualFocus = (_props_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _props_shouldUseVirtualFocus !== void 0 ? _props_shouldUseVirtualFocus : data === null || data === void 0 ? void 0 : data.shouldUseVirtualFocus;\n  var _props_isVirtualized;\n  let isVirtualized = (_props_isVirtualized = props.isVirtualized) !== null && _props_isVirtualized !== void 0 ? _props_isVirtualized : data === null || data === void 0 ? void 0 : data.isVirtualized;\n  let labelId = (0, $fcwmx$useSlotId)();\n  let descriptionId = (0, $fcwmx$useSlotId)();\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled || undefined,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!((0, $fcwmx$isMac)() && (0, $fcwmx$isWebKit)())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n  let item = state.collection.getItem(key);\n  if (isVirtualized) {\n    let index = Number(item === null || item === void 0 ? void 0 : item.index);\n    optionProps['aria-posinset'] = Number.isNaN(index) ? undefined : index + 1;\n    optionProps['aria-setsize'] = (0, $fcwmx$getItemCount)(state.collection);\n  }\n  let onAction = (data === null || data === void 0 ? void 0 : data.onAction) ? () => {\n    var _data_onAction;\n    return data === null || data === void 0 ? void 0 : (_data_onAction = data.onAction) === null || _data_onAction === void 0 ? void 0 : _data_onAction.call(data, key);\n  } : undefined;\n  let id = (0, $b1f0cad8af73213b$export$9145995848b05025)(state, key);\n  let {\n    itemProps: itemProps,\n    isPressed: isPressed,\n    isFocused: isFocused,\n    hasAction: hasAction,\n    allowsSelection: allowsSelection\n  } = (0, $fcwmx$useSelectableItem)({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    isDisabled: isDisabled,\n    onAction: onAction || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.onAction) ? (0, $fcwmx$chain)(item === null || item === void 0 ? void 0 : (_item_props1 = item.props) === null || _item_props1 === void 0 ? void 0 : _item_props1.onAction, onAction) : undefined,\n    linkBehavior: data === null || data === void 0 ? void 0 : data.linkBehavior,\n    id: id\n  });\n  let {\n    hoverProps: hoverProps\n  } = (0, $fcwmx$useHover)({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!(0, $fcwmx$isFocusVisible)()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n  let domProps = (0, $fcwmx$filterDOMProps)(item === null || item === void 0 ? void 0 : item.props);\n  delete domProps.id;\n  let linkProps = (0, $fcwmx$useLinkProps)(item === null || item === void 0 ? void 0 : item.props);\n  return {\n    optionProps: {\n      ...optionProps,\n      ...(0, $fcwmx$mergeProps)(domProps, itemProps, hoverProps, linkProps),\n      id: id\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isFocusVisible: isFocused && state.selectionManager.isFocused && (0, $fcwmx$isFocusVisible)(),\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nexport { $293f70390ea03370$export$497855f14858aa34 as useOption };","map":{"version":3,"names":["$293f70390ea03370$export$497855f14858aa34","props","state","ref","_item_props","_item_props1","key","data","$b1f0cad8af73213b$export$3585ede4d035bf14","get","_props_isDisabled","isDisabled","selectionManager","_props_isSelected","isSelected","_props_shouldSelectOnPressUp","shouldSelectOnPressUp","_props_shouldFocusOnHover","shouldFocusOnHover","_props_shouldUseVirtualFocus","shouldUseVirtualFocus","_props_isVirtualized","isVirtualized","labelId","$fcwmx$useSlotId","descriptionId","optionProps","role","undefined","selectionMode","$fcwmx$isMac","$fcwmx$isWebKit","item","collection","getItem","index","Number","isNaN","$fcwmx$getItemCount","onAction","_data_onAction","call","id","$b1f0cad8af73213b$export$9145995848b05025","itemProps","isPressed","isFocused","hasAction","allowsSelection","$fcwmx$useSelectableItem","allowsDifferentPressOrigin","$fcwmx$chain","linkBehavior","hoverProps","$fcwmx$useHover","onHoverStart","$fcwmx$isFocusVisible","setFocused","setFocusedKey","domProps","$fcwmx$filterDOMProps","linkProps","$fcwmx$useLinkProps","$fcwmx$mergeProps","labelProps","descriptionProps","isFocusVisible"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useOption.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain, filterDOMProps, isMac, isWebKit, mergeProps, useLinkProps, useSlotId} from '@react-aria/utils';\nimport {DOMAttributes, FocusableElement, Key, RefObject} from '@react-types/shared';\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {ListState} from '@react-stately/list';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\n\nexport interface OptionAria extends SelectableItemStates {\n  /** Props for the option element. */\n  optionProps: DOMAttributes,\n\n  /** Props for the main text element inside the option. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n\n  /** Whether the option is keyboard focused. */\n  isFocusVisible: boolean\n}\n\nexport interface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<FocusableElement | null>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.selectionManager.isDisabled(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data?.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data?.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data?.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data?.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled || undefined,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  let item = state.collection.getItem(key);\n  if (isVirtualized) {\n    let index = Number(item?.index);\n    optionProps['aria-posinset'] = Number.isNaN(index) ? undefined : index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let onAction = data?.onAction ? () => data?.onAction?.(key) : undefined;\n  let id = getItemId(state, key);\n  let {itemProps, isPressed, isFocused, hasAction, allowsSelection} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled,\n    onAction: onAction || item?.props?.onAction ? chain(item?.props?.onAction, onAction) : undefined,\n    linkBehavior: data?.linkBehavior,\n    id\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  let domProps = filterDOMProps(item?.props);\n  delete domProps.id;\n  let linkProps = useLinkProps(item?.props);\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(domProps, itemProps, hoverProps, linkProps),\n      id\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isFocusVisible: isFocused && state.selectionManager.isFocused && isFocusVisible(),\n    isSelected,\n    isDisabled,\n    isPressed,\n    allowsSelection,\n    hasAction\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}