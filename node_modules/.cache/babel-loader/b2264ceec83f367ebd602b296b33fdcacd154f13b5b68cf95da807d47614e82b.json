{"ast":null,"code":"import { useToggleButton as $55f54f7887471b58$export$51e84d46ca0bc451 } from \"./useToggleButton.mjs\";\nimport { useToolbar as $9iEyV$useToolbar } from \"@react-aria/toolbar\";\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $4547d1bf40011fdf$export$dd5580ae642f110f(props, state, ref) {\n  let {\n    isDisabled: isDisabled\n  } = props;\n  let {\n    toolbarProps: toolbarProps\n  } = (0, $9iEyV$useToolbar)(props, ref);\n  return {\n    groupProps: {\n      ...toolbarProps,\n      role: state.selectionMode === 'single' ? 'radiogroup' : toolbarProps.role,\n      'aria-disabled': isDisabled\n    }\n  };\n}\nfunction $4547d1bf40011fdf$export$bc53712daae3d6e6(props, state, ref) {\n  let toggleState = {\n    isSelected: state.selectedKeys.has(props.id),\n    setSelected(isSelected) {\n      state.setSelected(props.id, isSelected);\n    },\n    toggle() {\n      state.toggleKey(props.id);\n    }\n  };\n  let {\n    isPressed: isPressed,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    buttonProps: buttonProps\n  } = (0, $55f54f7887471b58$export$51e84d46ca0bc451)({\n    ...props,\n    id: undefined,\n    isDisabled: props.isDisabled || state.isDisabled\n  }, toggleState, ref);\n  if (state.selectionMode === 'single') {\n    buttonProps.role = 'radio';\n    buttonProps['aria-checked'] = toggleState.isSelected;\n    delete buttonProps['aria-pressed'];\n  }\n  return {\n    isPressed: isPressed,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    buttonProps: buttonProps\n  };\n}\nexport { $4547d1bf40011fdf$export$dd5580ae642f110f as useToggleButtonGroup, $4547d1bf40011fdf$export$bc53712daae3d6e6 as useToggleButtonGroupItem };","map":{"version":3,"names":["$4547d1bf40011fdf$export$dd5580ae642f110f","props","state","ref","isDisabled","toolbarProps","$9iEyV$useToolbar","groupProps","role","selectionMode","$4547d1bf40011fdf$export$bc53712daae3d6e6","toggleState","isSelected","selectedKeys","has","id","setSelected","toggle","toggleKey","isPressed","buttonProps","$55f54f7887471b58$export$51e84d46ca0bc451","undefined"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/useToggleButtonGroup.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes\n} from 'react';\nimport {AriaLabelingProps, DOMAttributes, Orientation, RefObject} from '@react-types/shared';\nimport {AriaToggleButtonGroupItemProps} from '@react-types/button';\nimport {ToggleButtonAria, useToggleButton} from './useToggleButton';\nimport {ToggleGroupProps, ToggleGroupState, ToggleState} from '@react-stately/toggle';\nimport {useToolbar} from '@react-aria/toolbar';\n\nexport interface AriaToggleButtonGroupProps extends ToggleGroupProps, AriaLabelingProps {\n  /**\n   * The orientation of the the toggle button group.\n   * @default 'horizontal'\n   */\n  orientation?: Orientation\n}\n\nexport interface ToggleButtonGroupAria {\n  /**\n   * Props for the toggle button group container.\n   */\n  groupProps: DOMAttributes\n}\n\nexport function useToggleButtonGroup(props: AriaToggleButtonGroupProps, state: ToggleGroupState, ref: RefObject<HTMLElement | null>): ToggleButtonGroupAria {\n  let {isDisabled} = props;\n  let {toolbarProps} = useToolbar(props, ref);\n\n  return {\n    groupProps: {\n      ...toolbarProps,\n      role: state.selectionMode === 'single' ? 'radiogroup' : toolbarProps.role,\n      'aria-disabled': isDisabled\n    }\n  };\n}\n\nexport type {AriaToggleButtonGroupItemProps};\nexport interface AriaToggleButtonGroupItemOptions<E extends ElementType> extends Omit<AriaToggleButtonGroupItemProps<E>, 'children'> {}\n\n// Order with overrides is important: 'button' should be default\nexport function useToggleButtonGroupItem(props: AriaToggleButtonGroupItemOptions<'button'>, state: ToggleGroupState, ref: RefObject<HTMLButtonElement | null>): ToggleButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButtonGroupItem(props: AriaToggleButtonGroupItemOptions<'a'>, state: ToggleGroupState, ref: RefObject<HTMLAnchorElement | null>): ToggleButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButtonGroupItem(props: AriaToggleButtonGroupItemOptions<'div'>, state: ToggleGroupState, ref: RefObject<HTMLDivElement | null>): ToggleButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButtonGroupItem(props: AriaToggleButtonGroupItemOptions<'input'>, state: ToggleGroupState, ref: RefObject<HTMLInputElement | null>): ToggleButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButtonGroupItem(props: AriaToggleButtonGroupItemOptions<'span'>, state: ToggleGroupState, ref: RefObject<HTMLSpanElement | null>): ToggleButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButtonGroupItem(props: AriaToggleButtonGroupItemOptions<ElementType>, state: ToggleGroupState, ref: RefObject<Element | null>): ToggleButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButtonGroupItem(props: AriaToggleButtonGroupItemOptions<ElementType>, state: ToggleGroupState, ref: RefObject<any>): ToggleButtonAria<HTMLAttributes<any>> {\n  let toggleState: ToggleState = {\n    isSelected: state.selectedKeys.has(props.id),\n    setSelected(isSelected) {\n      state.setSelected(props.id, isSelected);\n    },\n    toggle() {\n      state.toggleKey(props.id);\n    }\n  };\n\n  let {isPressed, isSelected, isDisabled, buttonProps} = useToggleButton({\n    ...props,\n    id: undefined,\n    isDisabled: props.isDisabled || state.isDisabled\n  }, toggleState, ref);\n  if (state.selectionMode === 'single') {\n    buttonProps.role = 'radio';\n    buttonProps['aria-checked'] = toggleState.isSelected;\n    delete buttonProps['aria-pressed'];\n  }\n\n  return {\n    isPressed,\n    isSelected,\n    isDisabled,\n    buttonProps\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AAwCO,SAASA,0CAAqBC,KAAiC,EAAEC,KAAuB,EAAEC,GAAkC;EACjI,IAAI;IAAAC,UAAA,EAACA;EAAU,CAAC,GAAGH,KAAA;EACnB,IAAI;IAAAI,YAAA,EAACA;EAAY,CAAC,GAAG,IAAAC,iBAAS,EAAEL,KAAA,EAAOE,GAAA;EAEvC,OAAO;IACLI,UAAA,EAAY;MACV,GAAGF,YAAY;MACfG,IAAA,EAAMN,KAAA,CAAMO,aAAa,KAAK,WAAW,eAAeJ,YAAA,CAAaG,IAAI;MACzE,iBAAiBJ;IACnB;EACF;AACF;AAgBO,SAASM,0CAAyBT,KAAoD,EAAEC,KAAuB,EAAEC,GAAmB;EACzI,IAAIQ,WAAA,GAA2B;IAC7BC,UAAA,EAAYV,KAAA,CAAMW,YAAY,CAACC,GAAG,CAACb,KAAA,CAAMc,EAAE;IAC3CC,YAAYJ,UAAU;MACpBV,KAAA,CAAMc,WAAW,CAACf,KAAA,CAAMc,EAAE,EAAEH,UAAA;IAC9B;IACAK,OAAA;MACEf,KAAA,CAAMgB,SAAS,CAACjB,KAAA,CAAMc,EAAE;IAC1B;EACF;EAEA,IAAI;IAAAI,SAAA,EAACA,SAAS;IAAAP,UAAA,EAAEA,UAAU;IAAAR,UAAA,EAAEA,UAAU;IAAAgB,WAAA,EAAEA;EAAW,CAAC,GAAG,IAAAC,yCAAc,EAAE;IACrE,GAAGpB,KAAK;IACRc,EAAA,EAAIO,SAAA;IACJlB,UAAA,EAAYH,KAAA,CAAMG,UAAU,IAAIF,KAAA,CAAME;EACxC,GAAGO,WAAA,EAAaR,GAAA;EAChB,IAAID,KAAA,CAAMO,aAAa,KAAK,UAAU;IACpCW,WAAA,CAAYZ,IAAI,GAAG;IACnBY,WAAW,CAAC,eAAe,GAAGT,WAAA,CAAYC,UAAU;IACpD,OAAOQ,WAAW,CAAC,eAAe;EACpC;EAEA,OAAO;eACLD,SAAA;gBACAP,UAAA;gBACAR,UAAA;iBACAgB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}