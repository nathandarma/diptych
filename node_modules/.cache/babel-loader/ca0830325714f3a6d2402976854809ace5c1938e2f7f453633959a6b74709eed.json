{"ast":null,"code":"import { mergeProps as $bwqiF$mergeProps, filterDOMProps as $bwqiF$filterDOMProps } from \"@react-aria/utils\";\nimport { usePress as $bwqiF$usePress, useFocusable as $bwqiF$useFocusable } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {\n  let {\n    elementType = 'button',\n    isDisabled: isDisabled,\n    onPress: onPress,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    onPressChange: onPressChange,\n    preventFocusOnPress: preventFocusOnPress,\n    allowFocusWhenDisabled:\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    onClick: onClick,\n    href: href,\n    target: target,\n    rel: rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') additionalProps = {\n    type: type,\n    disabled: isDisabled\n  };else additionalProps = {\n    role: 'button',\n    href: elementType === 'a' && !isDisabled ? href : undefined,\n    target: elementType === 'a' ? target : undefined,\n    type: elementType === 'input' ? type : undefined,\n    disabled: elementType === 'input' ? isDisabled : undefined,\n    'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n    rel: elementType === 'a' ? rel : undefined\n  };\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $bwqiF$usePress)({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    onPressUp: onPressUp,\n    onClick: onClick,\n    isDisabled: isDisabled,\n    preventFocusOnPress: preventFocusOnPress,\n    ref: ref\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $bwqiF$useFocusable)(props, ref);\n  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  let buttonProps = (0, $bwqiF$mergeProps)(focusableProps, pressProps, (0, $bwqiF$filterDOMProps)(props, {\n    labelable: true\n  }));\n  return {\n    isPressed: isPressed,\n    buttonProps: (0, $bwqiF$mergeProps)(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      'aria-current': props['aria-current']\n    })\n  };\n}\nexport { $701a24aa0da5b062$export$ea18c227d4417cc3 as useButton };","map":{"version":3,"names":["$701a24aa0da5b062$export$ea18c227d4417cc3","props","ref","elementType","isDisabled","onPress","onPressStart","onPressEnd","onPressUp","onPressChange","preventFocusOnPress","allowFocusWhenDisabled","onClick","href","target","rel","type","additionalProps","disabled","role","undefined","pressProps","isPressed","$bwqiF$usePress","focusableProps","$bwqiF$useFocusable","tabIndex","buttonProps","$bwqiF$mergeProps","$bwqiF$filterDOMProps","labelable"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/useButton.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useFocusable, usePress} from '@react-aria/interactions';\n\nexport interface AriaButtonOptions<E extends ElementType> extends Omit<AriaButtonProps<E>, 'children'> {}\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n// Order with overrides is important: 'button' should be default\nexport function useButton(props: AriaButtonOptions<'button'>, ref: RefObject<HTMLButtonElement | null>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonOptions<'a'>, ref: RefObject<HTMLAnchorElement | null>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonOptions<'div'>, ref: RefObject<HTMLDivElement | null>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonOptions<'input'>, ref: RefObject<HTMLInputElement | null>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonOptions<'span'>, ref: RefObject<HTMLSpanElement | null>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonOptions<ElementType>, ref: RefObject<Element | null>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonOptions<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    onPressChange,\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    onClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      href: elementType === 'a' && !isDisabled ? href : undefined,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    onPressUp,\n    onClick,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      'aria-current': props['aria-current']\n    })\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AA+CO,SAASA,0CAAUC,KAAqC,EAAEC,GAAmB;EAClF,IAAI;IACFC,WAAA,GAAc;IAAAC,UAAA,EACdA,UAAU;IAAAC,OAAA,EACVA,OAAO;IAAAC,YAAA,EACPA,YAAY;IAAAC,UAAA,EACZA,UAAU;IAAAC,SAAA,EACVA,SAAS;IAAAC,aAAA,EACTA,aAAa;IAAAC,mBAAA,EACbA,mBAAmB;IAAAC,sBAAA;IACnB;IACAA,sBAAsB;IAAAC,OAAA,EACtBA,OAAO;IAAAC,IAAA,EACPA,IAAI;IAAAC,MAAA,EACJA,MAAM;IAAAC,GAAA,EACNA,GAAG;IACHC,IAAA,GAAO;EAAA,CACR,GAAGf,KAAA;EACJ,IAAIgB,eAAA;EACJ,IAAId,WAAA,KAAgB,UAClBc,eAAA,GAAkB;UAChBD,IAAA;IACAE,QAAA,EAAUd;EACZ,OAEAa,eAAA,GAAkB;IAChBE,IAAA,EAAM;IACNN,IAAA,EAAMV,WAAA,KAAgB,OAAO,CAACC,UAAA,GAAaS,IAAA,GAAOO,SAAA;IAClDN,MAAA,EAAQX,WAAA,KAAgB,MAAMW,MAAA,GAASM,SAAA;IACvCJ,IAAA,EAAMb,WAAA,KAAgB,UAAUa,IAAA,GAAOI,SAAA;IACvCF,QAAA,EAAUf,WAAA,KAAgB,UAAUC,UAAA,GAAagB,SAAA;IACjD,iBAAiB,CAAChB,UAAA,IAAcD,WAAA,KAAgB,UAAUiB,SAAA,GAAYhB,UAAA;IACtEW,GAAA,EAAKZ,WAAA,KAAgB,MAAMY,GAAA,GAAMK;EACnC;EAGF,IAAI;IAAAC,UAAA,EAACA,UAAU;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAG,IAAAC,eAAO,EAAE;kBACrCjB,YAAA;gBACAC,UAAA;mBACAE,aAAA;aACAJ,OAAA;eACAG,SAAA;aACAI,OAAA;gBACAR,UAAA;yBACAM,mBAAA;SACAR;EACF;EAEA,IAAI;IAAAsB,cAAA,EAACA;EAAc,CAAC,GAAG,IAAAC,mBAAW,EAAExB,KAAA,EAAOC,GAAA;EAC3C,IAAIS,sBAAA,EACFa,cAAA,CAAeE,QAAQ,GAAGtB,UAAA,GAAa,KAAKoB,cAAA,CAAeE,QAAQ;EAErE,IAAIC,WAAA,GAAc,IAAAC,iBAAS,EAAEJ,cAAA,EAAgBH,UAAA,EAAY,IAAAQ,qBAAa,EAAE5B,KAAA,EAAO;IAAC6B,SAAA,EAAW;EAAI;EAE/F,OAAO;eACLR,SAAA;IACAK,WAAA,EAAa,IAAAC,iBAAS,EAAEX,eAAA,EAAiBU,WAAA,EAAa;MACpD,iBAAiB1B,KAAK,CAAC,gBAAgB;MACvC,iBAAiBA,KAAK,CAAC,gBAAgB;MACvC,iBAAiBA,KAAK,CAAC,gBAAgB;MACvC,gBAAgBA,KAAK,CAAC,eAAe;MACrC,gBAAgBA,KAAK,CAAC;IACxB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}