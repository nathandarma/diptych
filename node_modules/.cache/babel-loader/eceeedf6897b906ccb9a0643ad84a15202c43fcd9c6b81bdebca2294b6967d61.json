{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { isArgumentElement, isDateElement, isNumberElement, isPluralElement, isSelectElement, isTagElement, isTimeElement, TYPE } from './types';\nfunction cloneDeep(obj) {\n  if (Array.isArray(obj)) {\n    // @ts-expect-error meh\n    return __spreadArray([], obj.map(cloneDeep), true);\n  }\n  if (obj !== null && typeof obj === 'object') {\n    // @ts-expect-error meh\n    return Object.keys(obj).reduce(function (cloned, k) {\n      // @ts-expect-error meh\n      cloned[k] = cloneDeep(obj[k]);\n      return cloned;\n    }, {});\n  }\n  return obj;\n}\nfunction hoistPluralOrSelectElement(ast, el, positionToInject) {\n  // pull this out of the ast and move it to the top\n  var cloned = cloneDeep(el);\n  var options = cloned.options;\n  cloned.options = Object.keys(options).reduce(function (all, k) {\n    var newValue = hoistSelectors(__spreadArray(__spreadArray(__spreadArray([], ast.slice(0, positionToInject), true), options[k].value, true), ast.slice(positionToInject + 1), true));\n    all[k] = {\n      value: newValue\n    };\n    return all;\n  }, {});\n  return cloned;\n}\nfunction isPluralOrSelectElement(el) {\n  return isPluralElement(el) || isSelectElement(el);\n}\nfunction findPluralOrSelectElement(ast) {\n  return !!ast.find(function (el) {\n    if (isPluralOrSelectElement(el)) {\n      return true;\n    }\n    if (isTagElement(el)) {\n      return findPluralOrSelectElement(el.children);\n    }\n    return false;\n  });\n}\n/**\n * Hoist all selectors to the beginning of the AST & flatten the\n * resulting options. E.g:\n * \"I have {count, plural, one{a dog} other{many dogs}}\"\n * becomes \"{count, plural, one{I have a dog} other{I have many dogs}}\".\n * If there are multiple selectors, the order of which one is hoisted 1st\n * is non-deterministic.\n * The goal is to provide as many full sentences as possible since fragmented\n * sentences are not translator-friendly\n * @param ast AST\n */\nexport function hoistSelectors(ast) {\n  for (var i = 0; i < ast.length; i++) {\n    var el = ast[i];\n    if (isPluralOrSelectElement(el)) {\n      return [hoistPluralOrSelectElement(ast, el, i)];\n    }\n    if (isTagElement(el) && findPluralOrSelectElement([el])) {\n      throw new Error('Cannot hoist plural/select within a tag element. Please put the tag element inside each plural/select option');\n    }\n  }\n  return ast;\n}\n/**\n * Collect all variables in an AST to Record<string, TYPE>\n * @param ast AST to collect variables from\n * @param vars Record of variable name to variable type\n */\nfunction collectVariables(ast, vars) {\n  if (vars === void 0) {\n    vars = new Map();\n  }\n  ast.forEach(function (el) {\n    if (isArgumentElement(el) || isDateElement(el) || isTimeElement(el) || isNumberElement(el)) {\n      if (el.value in vars && vars.get(el.value) !== el.type) {\n        throw new Error(\"Variable \".concat(el.value, \" has conflicting types\"));\n      }\n      vars.set(el.value, el.type);\n    }\n    if (isPluralElement(el) || isSelectElement(el)) {\n      vars.set(el.value, el.type);\n      Object.keys(el.options).forEach(function (k) {\n        collectVariables(el.options[k].value, vars);\n      });\n    }\n    if (isTagElement(el)) {\n      vars.set(el.value, el.type);\n      collectVariables(el.children, vars);\n    }\n  });\n}\n/**\n * Check if 2 ASTs are structurally the same. This primarily means that\n * they have the same variables with the same type\n * @param a\n * @param b\n * @returns\n */\nexport function isStructurallySame(a, b) {\n  var aVars = new Map();\n  var bVars = new Map();\n  collectVariables(a, aVars);\n  collectVariables(b, bVars);\n  if (aVars.size !== bVars.size) {\n    return {\n      success: false,\n      error: new Error(\"Different number of variables: [\".concat(Array.from(aVars.keys()).join(', '), \"] vs [\").concat(Array.from(bVars.keys()).join(', '), \"]\"))\n    };\n  }\n  return Array.from(aVars.entries()).reduce(function (result, _a) {\n    var key = _a[0],\n      type = _a[1];\n    if (!result.success) {\n      return result;\n    }\n    var bType = bVars.get(key);\n    if (bType == null) {\n      return {\n        success: false,\n        error: new Error(\"Missing variable \".concat(key, \" in message\"))\n      };\n    }\n    if (bType !== type) {\n      return {\n        success: false,\n        error: new Error(\"Variable \".concat(key, \" has conflicting types: \").concat(TYPE[type], \" vs \").concat(TYPE[bType]))\n      };\n    }\n    return result;\n  }, {\n    success: true\n  });\n}","map":{"version":3,"names":["__spreadArray","isArgumentElement","isDateElement","isNumberElement","isPluralElement","isSelectElement","isTagElement","isTimeElement","TYPE","cloneDeep","obj","Array","isArray","map","Object","keys","reduce","cloned","k","hoistPluralOrSelectElement","ast","el","positionToInject","options","all","newValue","hoistSelectors","slice","value","isPluralOrSelectElement","findPluralOrSelectElement","find","children","i","length","Error","collectVariables","vars","Map","forEach","get","type","concat","set","isStructurallySame","a","b","aVars","bVars","size","success","error","from","join","entries","result","_a","key","bType"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js"],"sourcesContent":["import { __spreadArray } from \"tslib\";\nimport { isArgumentElement, isDateElement, isNumberElement, isPluralElement, isSelectElement, isTagElement, isTimeElement, TYPE, } from './types';\nfunction cloneDeep(obj) {\n    if (Array.isArray(obj)) {\n        // @ts-expect-error meh\n        return __spreadArray([], obj.map(cloneDeep), true);\n    }\n    if (obj !== null && typeof obj === 'object') {\n        // @ts-expect-error meh\n        return Object.keys(obj).reduce(function (cloned, k) {\n            // @ts-expect-error meh\n            cloned[k] = cloneDeep(obj[k]);\n            return cloned;\n        }, {});\n    }\n    return obj;\n}\nfunction hoistPluralOrSelectElement(ast, el, positionToInject) {\n    // pull this out of the ast and move it to the top\n    var cloned = cloneDeep(el);\n    var options = cloned.options;\n    cloned.options = Object.keys(options).reduce(function (all, k) {\n        var newValue = hoistSelectors(__spreadArray(__spreadArray(__spreadArray([], ast.slice(0, positionToInject), true), options[k].value, true), ast.slice(positionToInject + 1), true));\n        all[k] = {\n            value: newValue,\n        };\n        return all;\n    }, {});\n    return cloned;\n}\nfunction isPluralOrSelectElement(el) {\n    return isPluralElement(el) || isSelectElement(el);\n}\nfunction findPluralOrSelectElement(ast) {\n    return !!ast.find(function (el) {\n        if (isPluralOrSelectElement(el)) {\n            return true;\n        }\n        if (isTagElement(el)) {\n            return findPluralOrSelectElement(el.children);\n        }\n        return false;\n    });\n}\n/**\n * Hoist all selectors to the beginning of the AST & flatten the\n * resulting options. E.g:\n * \"I have {count, plural, one{a dog} other{many dogs}}\"\n * becomes \"{count, plural, one{I have a dog} other{I have many dogs}}\".\n * If there are multiple selectors, the order of which one is hoisted 1st\n * is non-deterministic.\n * The goal is to provide as many full sentences as possible since fragmented\n * sentences are not translator-friendly\n * @param ast AST\n */\nexport function hoistSelectors(ast) {\n    for (var i = 0; i < ast.length; i++) {\n        var el = ast[i];\n        if (isPluralOrSelectElement(el)) {\n            return [hoistPluralOrSelectElement(ast, el, i)];\n        }\n        if (isTagElement(el) && findPluralOrSelectElement([el])) {\n            throw new Error('Cannot hoist plural/select within a tag element. Please put the tag element inside each plural/select option');\n        }\n    }\n    return ast;\n}\n/**\n * Collect all variables in an AST to Record<string, TYPE>\n * @param ast AST to collect variables from\n * @param vars Record of variable name to variable type\n */\nfunction collectVariables(ast, vars) {\n    if (vars === void 0) { vars = new Map(); }\n    ast.forEach(function (el) {\n        if (isArgumentElement(el) ||\n            isDateElement(el) ||\n            isTimeElement(el) ||\n            isNumberElement(el)) {\n            if (el.value in vars && vars.get(el.value) !== el.type) {\n                throw new Error(\"Variable \".concat(el.value, \" has conflicting types\"));\n            }\n            vars.set(el.value, el.type);\n        }\n        if (isPluralElement(el) || isSelectElement(el)) {\n            vars.set(el.value, el.type);\n            Object.keys(el.options).forEach(function (k) {\n                collectVariables(el.options[k].value, vars);\n            });\n        }\n        if (isTagElement(el)) {\n            vars.set(el.value, el.type);\n            collectVariables(el.children, vars);\n        }\n    });\n}\n/**\n * Check if 2 ASTs are structurally the same. This primarily means that\n * they have the same variables with the same type\n * @param a\n * @param b\n * @returns\n */\nexport function isStructurallySame(a, b) {\n    var aVars = new Map();\n    var bVars = new Map();\n    collectVariables(a, aVars);\n    collectVariables(b, bVars);\n    if (aVars.size !== bVars.size) {\n        return {\n            success: false,\n            error: new Error(\"Different number of variables: [\".concat(Array.from(aVars.keys()).join(', '), \"] vs [\").concat(Array.from(bVars.keys()).join(', '), \"]\")),\n        };\n    }\n    return Array.from(aVars.entries()).reduce(function (result, _a) {\n        var key = _a[0], type = _a[1];\n        if (!result.success) {\n            return result;\n        }\n        var bType = bVars.get(key);\n        if (bType == null) {\n            return {\n                success: false,\n                error: new Error(\"Missing variable \".concat(key, \" in message\")),\n            };\n        }\n        if (bType !== type) {\n            return {\n                success: false,\n                error: new Error(\"Variable \".concat(key, \" has conflicting types: \").concat(TYPE[type], \" vs \").concat(TYPE[bType])),\n            };\n        }\n        return result;\n    }, { success: true });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}