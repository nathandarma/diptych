{"ast":null,"code":"import { useMultiSelectListState } from \"./chunk-RVB7J7GX.mjs\";\n\n// src/use-multiselect-state.ts\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { useFormValidationState } from \"@react-stately/form\";\nimport { useState } from \"react\";\nfunction useMultiSelectState({\n  validate,\n  validationBehavior,\n  ...props\n}) {\n  const [isFocused, setFocused] = useState(false);\n  const [focusStrategy, setFocusStrategy] = useState(null);\n  const triggerState = useMenuTriggerState(props);\n  const listState = useMultiSelectListState({\n    ...props,\n    onSelectionChange: keys => {\n      if (props.onSelectionChange != null) {\n        if (keys === \"all\") {\n          props.onSelectionChange(new Set(listState.collection.getKeys()));\n        } else {\n          props.onSelectionChange(keys);\n        }\n      }\n      if (props.selectionMode === \"single\") {\n        triggerState.close();\n      }\n    }\n  });\n  const validationState = useFormValidationState({\n    ...props,\n    validationBehavior,\n    validate: value => {\n      if (!validate) return;\n      const keys = Array.from(value);\n      return validate(props.selectionMode === \"single\" ? keys[0] : keys);\n    },\n    // @ts-ignore\n    value: listState.selectedKeys\n  });\n  const shouldHideContent = listState.collection.size === 0 && props.hideEmptyContent;\n  return {\n    ...validationState,\n    ...listState,\n    ...triggerState,\n    focusStrategy,\n    close() {\n      triggerState.close();\n    },\n    open(focusStrategy2 = null) {\n      if (shouldHideContent) return;\n      setFocusStrategy(focusStrategy2);\n      triggerState.open();\n    },\n    toggle(focusStrategy2 = null) {\n      if (shouldHideContent) return;\n      setFocusStrategy(focusStrategy2);\n      triggerState.toggle();\n    },\n    isFocused,\n    setFocused\n  };\n}\nexport { useMultiSelectState };","map":{"version":3,"names":["useMultiSelectListState","useMenuTriggerState","useFormValidationState","useState","useMultiSelectState","validate","validationBehavior","props","isFocused","setFocused","focusStrategy","setFocusStrategy","triggerState","listState","onSelectionChange","keys","Set","collection","getKeys","selectionMode","close","validationState","value","Array","from","selectedKeys","shouldHideContent","size","hideEmptyContent","open","focusStrategy2","toggle"],"sources":["/Users/nathandarma/Documents/App Testing/Diptych/diptych/node_modules/@heroui/use-aria-multiselect/dist/chunk-HZB24KV4.mjs"],"sourcesContent":["import {\n  useMultiSelectListState\n} from \"./chunk-RVB7J7GX.mjs\";\n\n// src/use-multiselect-state.ts\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { useFormValidationState } from \"@react-stately/form\";\nimport { useState } from \"react\";\nfunction useMultiSelectState({\n  validate,\n  validationBehavior,\n  ...props\n}) {\n  const [isFocused, setFocused] = useState(false);\n  const [focusStrategy, setFocusStrategy] = useState(null);\n  const triggerState = useMenuTriggerState(props);\n  const listState = useMultiSelectListState({\n    ...props,\n    onSelectionChange: (keys) => {\n      if (props.onSelectionChange != null) {\n        if (keys === \"all\") {\n          props.onSelectionChange(new Set(listState.collection.getKeys()));\n        } else {\n          props.onSelectionChange(keys);\n        }\n      }\n      if (props.selectionMode === \"single\") {\n        triggerState.close();\n      }\n    }\n  });\n  const validationState = useFormValidationState({\n    ...props,\n    validationBehavior,\n    validate: (value) => {\n      if (!validate) return;\n      const keys = Array.from(value);\n      return validate(props.selectionMode === \"single\" ? keys[0] : keys);\n    },\n    // @ts-ignore\n    value: listState.selectedKeys\n  });\n  const shouldHideContent = listState.collection.size === 0 && props.hideEmptyContent;\n  return {\n    ...validationState,\n    ...listState,\n    ...triggerState,\n    focusStrategy,\n    close() {\n      triggerState.close();\n    },\n    open(focusStrategy2 = null) {\n      if (shouldHideContent) return;\n      setFocusStrategy(focusStrategy2);\n      triggerState.open();\n    },\n    toggle(focusStrategy2 = null) {\n      if (shouldHideContent) return;\n      setFocusStrategy(focusStrategy2);\n      triggerState.toggle();\n    },\n    isFocused,\n    setFocused\n  };\n}\n\nexport {\n  useMultiSelectState\n};\n"],"mappings":"AAAA,SACEA,uBAAuB,QAClB,sBAAsB;;AAE7B;AACA,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,sBAAsB,QAAQ,qBAAqB;AAC5D,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,mBAAmBA,CAAC;EAC3BC,QAAQ;EACRC,kBAAkB;EAClB,GAAGC;AACL,CAAC,EAAE;EACD,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAMS,YAAY,GAAGX,mBAAmB,CAACM,KAAK,CAAC;EAC/C,MAAMM,SAAS,GAAGb,uBAAuB,CAAC;IACxC,GAAGO,KAAK;IACRO,iBAAiB,EAAGC,IAAI,IAAK;MAC3B,IAAIR,KAAK,CAACO,iBAAiB,IAAI,IAAI,EAAE;QACnC,IAAIC,IAAI,KAAK,KAAK,EAAE;UAClBR,KAAK,CAACO,iBAAiB,CAAC,IAAIE,GAAG,CAACH,SAAS,CAACI,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;QAClE,CAAC,MAAM;UACLX,KAAK,CAACO,iBAAiB,CAACC,IAAI,CAAC;QAC/B;MACF;MACA,IAAIR,KAAK,CAACY,aAAa,KAAK,QAAQ,EAAE;QACpCP,YAAY,CAACQ,KAAK,CAAC,CAAC;MACtB;IACF;EACF,CAAC,CAAC;EACF,MAAMC,eAAe,GAAGnB,sBAAsB,CAAC;IAC7C,GAAGK,KAAK;IACRD,kBAAkB;IAClBD,QAAQ,EAAGiB,KAAK,IAAK;MACnB,IAAI,CAACjB,QAAQ,EAAE;MACf,MAAMU,IAAI,GAAGQ,KAAK,CAACC,IAAI,CAACF,KAAK,CAAC;MAC9B,OAAOjB,QAAQ,CAACE,KAAK,CAACY,aAAa,KAAK,QAAQ,GAAGJ,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC;IACpE,CAAC;IACD;IACAO,KAAK,EAAET,SAAS,CAACY;EACnB,CAAC,CAAC;EACF,MAAMC,iBAAiB,GAAGb,SAAS,CAACI,UAAU,CAACU,IAAI,KAAK,CAAC,IAAIpB,KAAK,CAACqB,gBAAgB;EACnF,OAAO;IACL,GAAGP,eAAe;IAClB,GAAGR,SAAS;IACZ,GAAGD,YAAY;IACfF,aAAa;IACbU,KAAKA,CAAA,EAAG;MACNR,YAAY,CAACQ,KAAK,CAAC,CAAC;IACtB,CAAC;IACDS,IAAIA,CAACC,cAAc,GAAG,IAAI,EAAE;MAC1B,IAAIJ,iBAAiB,EAAE;MACvBf,gBAAgB,CAACmB,cAAc,CAAC;MAChClB,YAAY,CAACiB,IAAI,CAAC,CAAC;IACrB,CAAC;IACDE,MAAMA,CAACD,cAAc,GAAG,IAAI,EAAE;MAC5B,IAAIJ,iBAAiB,EAAE;MACvBf,gBAAgB,CAACmB,cAAc,CAAC;MAChClB,YAAY,CAACmB,MAAM,CAAC,CAAC;IACvB,CAAC;IACDvB,SAAS;IACTC;EACF,CAAC;AACH;AAEA,SACEL,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}